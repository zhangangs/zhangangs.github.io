<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>飞鱼</title>
  
  <subtitle>竹杖芒鞋轻胜马，一蓑烟雨任平生</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhangangs.github.io/"/>
  <updated>2020-02-21T06:12:42.155Z</updated>
  <id>https://zhangangs.github.io/</id>
  
  <author>
    <name>zhangangs</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python自动填写网页表单</title>
    <link href="https://zhangangs.github.io/2020/02/21/pthon%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%86%99%E7%BD%91%E9%A1%B5%E8%A1%A8%E5%8D%95/"/>
    <id>https://zhangangs.github.io/2020/02/21/pthon自动填写网页表单/</id>
    <published>2020-02-20T16:00:00.000Z</published>
    <updated>2020-02-21T06:12:42.155Z</updated>
    
    <content type="html"><![CDATA[<p>每天都要在OA中填写每日身体情况反馈表，内容都是重复的，最重要的就是填写每天的体温，而我经常又忘记填写，琢磨着写个自动任务帮我搞定。</p><p>就简单的写个python定时任务，每天下午2：00定时帮我填一下表。</p><p>原理就是模拟人的操作方式，访问网站，点击登录，选择navbar，填写表单和保存表单等操作。</p><p>代码很简单，第一次做这个，代码写的不咋好，贴一下主要的代码，做一个简单的记录，代码如下所示：</p><p><strong>index.py</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> task</span><br><span class="line"><span class="keyword">import</span> schedule</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">print(<span class="string">"执行开始！！！！"</span>)</span><br><span class="line"></span><br><span class="line">schedule.every().day.at(<span class="string">'14:00'</span>).do(task.taskFun)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'执行时间：'</span> + datetime.datetime.now().strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    schedule.run_pending()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></p><p><strong> task.py </strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">taskFun</span><span class="params">()</span>:</span></span><br><span class="line">    driver = webdriver.Chrome(<span class="string">"C:\Program Files (x86)\Google\Chrome\Application\chromedriver.exe"</span>)</span><br><span class="line"></span><br><span class="line">    driver.set_window_size(<span class="number">800</span>, <span class="number">800</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 访问网页地址</span></span><br><span class="line">    driver.get(url=<span class="string">'http://********/?m=login'</span>)</span><br><span class="line"></span><br><span class="line">    driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输入用户名</span></span><br><span class="line">    driver.find_element_by_xpath(<span class="string">'//*[@id="loginview0"]/div[1]/div/input'</span>).send_keys(<span class="string">'####'</span>)</span><br><span class="line">    <span class="comment"># 输入密码</span></span><br><span class="line">    driver.find_element_by_xpath(<span class="string">'//*[@id="loginview0"]/div[3]/div/input'</span>).send_keys(<span class="string">'####'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 登录</span></span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    driver.find_element_by_xpath(<span class="string">'/html/body/div/div[4]/form/div[4]/button'</span>).click()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># nav选择</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    driver.find_element_by_xpath(<span class="string">'//*[@id="topmenudiv"]/span[3]'</span>).click()</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    driver.find_element_by_css_selector(<span class="string">"#menu_list_num410"</span>).click()</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 点击新增按钮</span></span><br><span class="line">    driver.find_element_by_xpath(</span><br><span class="line">        <span class="string">'/html/body/table/tbody/tr/td[3]/div/div[4]/div/div[2]/div[1]/table/tbody/tr/td[1]/button'</span>).click()</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 进入到iframe中选择元素</span></span><br><span class="line">    driver.switch_to.frame(<span class="string">"openinputiframe"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 填写数据</span></span><br><span class="line">    driver.find_element_by_xpath(<span class="string">'//*[@id="div_temperature_am"]/input'</span>).send_keys(<span class="string">'36.5'</span>)</span><br><span class="line">    driver.find_element_by_xpath(<span class="string">'//*[@id="div_temperature_pm"]/input'</span>).send_keys(<span class="string">'36.5'</span>)</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="comment"># 提交表单</span></span><br><span class="line">    driver.find_element_by_xpath(<span class="string">'//*[@id="AltS"]'</span>).click()</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="comment"># 退出程序</span></span><br><span class="line">    driver.quit()</span><br></pre></td></tr></table></figure><p><strong>使用方法</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python index.py</span><br></pre></td></tr></table></figure></p><p>完成，一直跑起来就可以了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;每天都要在OA中填写每日身体情况反馈表，内容都是重复的，最重要的就是填写每天的体温，而我经常又忘记填写，琢磨着写个自动任务帮我搞定。&lt;/p&gt;
&lt;p&gt;就简单的写个python定时任务，每天下午2：00定时帮我填一下表。&lt;/p&gt;
&lt;p&gt;原理就是模拟人的操作方式，访问网站，点击登
      
    
    </summary>
    
    
      <category term="python" scheme="https://zhangangs.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>mac中修改mysql字符集</title>
    <link href="https://zhangangs.github.io/2019/12/06/mac%E4%B8%AD%E4%BF%AE%E6%94%B9mysql%E5%AD%97%E7%AC%A6%E9%9B%86/"/>
    <id>https://zhangangs.github.io/2019/12/06/mac中修改mysql字符集/</id>
    <published>2019-12-05T16:00:00.000Z</published>
    <updated>2020-02-21T05:46:05.928Z</updated>
    
    <content type="html"><![CDATA[<p>开发的的时候遇到的问题，英文能正常储存，中文字符储存到mysql中全部变成了“？”星号。</p><p>问题就是mysql默认的字符编码问题。修改成utf8编码就可以了。</p><p><strong>第一步：首先查看mysql默认字符集</strong></p><p>Navicat或者mysql中输入命令:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%char%'</span>;</span><br></pre></td></tr></table></figure></p><p><strong> 第二步：停止mysql服务 </strong></p><ul><li>系统偏好设置 -&gt; 找到mysql的选项点击</li><li>点击 Stop MySQL Server 关闭mysql服务</li></ul><p><strong> 第三步：修改mysql配置文件</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 拷贝my.cnf到etc目录</span><br><span class="line">sudo cp /usr/local/mysql/support-files/my-medium.cnf /etc/my.cnf</span><br><span class="line"></span><br><span class="line">// 编辑my.cnf文件</span><br><span class="line">sudo vi /etc/my.cnf</span><br><span class="line"></span><br><span class="line">[client]部分加入：</span><br><span class="line"></span><br><span class="line">default-character-<span class="keyword">set</span>=utf8</span><br><span class="line"></span><br><span class="line">[mysqld]部分加入：</span><br><span class="line"></span><br><span class="line"><span class="built_in">character</span>-<span class="keyword">set</span>-<span class="keyword">server</span>=utf8</span><br></pre></td></tr></table></figure><p><strong> 第四步：重启mysql服务,查看字符编码 </strong></p><p>完成！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;开发的的时候遇到的问题，英文能正常储存，中文字符储存到mysql中全部变成了“？”星号。&lt;/p&gt;
&lt;p&gt;问题就是mysql默认的字符编码问题。修改成utf8编码就可以了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一步：首先查看mysql默认字符集&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;N
      
    
    </summary>
    
    
      <category term="mysql" scheme="https://zhangangs.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>游戏：三国志11威力加强版个人笔记</title>
    <link href="https://zhangangs.github.io/2019/10/07/%E6%B8%B8%E6%88%8F%EF%BC%9A%E4%B8%89%E5%9B%BD%E5%BF%9711%E5%A8%81%E5%8A%9B%E5%8A%A0%E5%BC%BA%E7%89%88%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"/>
    <id>https://zhangangs.github.io/2019/10/07/游戏：三国志11威力加强版个人笔记/</id>
    <published>2019-10-06T16:00:00.000Z</published>
    <updated>2020-02-21T05:43:11.621Z</updated>
    
    <content type="html"><![CDATA[<p>《<a href="https://baike.baidu.com/item/%E4%B8%89%E5%9B%BD%E5%BF%9711%E5%A8%81%E5%8A%9B%E5%8A%A0%E5%BC%BA%E7%89%88" target="_blank" rel="noopener">三国志11威力加强版</a>》是一款日本光荣公司开发的一款历史模拟游戏，玩了很长一段时间，整理一下我玩游戏的笔记，以及个人玩法特色。</p><p><strong>本人喜欢前期种田，后期速推。</strong></p><p>下面从内政，出兵，防御，研究，攻城掠地等方面说起。</p><p>我用《251英雄集结剧本刘备》举例，在此之前我开了SIRE，这是一个辅助软件，开了内政自动合并，副将也可以辅助攻击等等。</p><p>251刘备，江陵开局，一颗星难度，手下能臣猛将一堆，其实已经立于不败之地了。</p><p><strong>关于开局</strong><br>开局喜欢罢官和搜索人才，研究能力重政治低&gt;筑城&gt;搬运，在研究武力低到连击，因为可能会出枪神/戟神/弓神/勇将/斗神等隐藏特技。</p><p><strong>关于地势</strong><br>关于江陵，左右四周无坚可守，强敌环绕，江陵，寿春城是著名的绞肉机，四面都可以进攻。</p><p>打法有很多种：</p><p>第一种速推襄阳或者柴桑，收其兵将。</p><p>第二种搬家永安，出兵蜀地，攻下江州，成都，建宁，云南即为大后方，没有势力骚扰，安心发展内政，派猛将守住永安，抵挡江陵和襄阳方向的进攻，而主力部队，出梓潼，出兵汉中，则蜀地连成一片，前线为汉中和永安。</p><p>个人喜欢搬家永安。</p><p><strong>关于褒奖</strong><br>只褒奖忠诚低于95的即可，有的武将节操太低忠诚低于95就可能会叛变，大于95的褒奖浪费钱。</p><p><strong>关于官职</strong><br>只给出兵的主将官职，让其带的兵多点，前期可以省下很多的钱。</p><p><strong>关于出征</strong><br>喜欢枪，戟，弩各一队，主将为结拜，相互亲爱，父子最好，可以互相援助攻击。</p><p>例如：</p><p><strong>刘备+关羽+张飞组合，最经典的组合之一</strong><br>弩兵：刘备（遁走）+赵云（洞察）+关平（辅佐）<br>枪兵：关羽（神将）+刘封（枪将）+姜维（反计）<br>戟兵：张飞（斗神）+张苞（扫荡）+徐庶（精妙）</p><p>刘备,关羽，张飞互相援助攻击，关羽硬控，刘备弩兵主攻击，张飞戟兵主击破（戟兵击破低将部队捕俘几率大）。<br>赵云高攻，高统，为弩兵提供高攻击，防止计谋。<br>徐庶高智，特技提供双倍技巧点，同时防止中计。<br>余下的主要住做培养，为以后单独领兵做准备。</p><p><strong>马腾（骑兵）+马超（骑兵）+马铁（骑兵）+马岱（骑兵）+马休（骑兵）+马云禄（骑兵），即又父子又有兄弟，又相互亲爱。</strong></p><p><strong>曹仁（戟兵）+夏侯渊（弩兵）+曹洪（枪兵），相互亲爱。</strong></p><p><strong>公孙瓒（骑兵）+公孙越（骑兵）+公孙范（骑兵）+公孙续（骑兵），兄弟组合。</strong></p><p>没有上面的组合？可以三个结拜或者带特技为辅助的副将。例如：</p><p><strong>徐晃（戟兵）+曹仁（戟兵）+张辽（戟兵），结拜或者带特技为辅佐的副将。</strong></p><p><strong>关于防守</strong></p><ul><li>推荐堵路大法。网上有教程详解的很详细。链接：<a href="https://game.ali213.net/thread-3059001-1-1.html" target="_blank" rel="noopener">三国志11——阵、土垒、火球堵路方法之研究</a></li><li>港口/关卡坑兵大法（港口/关卡让敌方部队进入，在攻破关卡）。</li><li>港口/关卡抵御大法（港口/关卡不攻破，在关卡下用弩兵攻击敌方部队）。</li></ul><p><strong>关于最值得培养的将领</strong><br>我开了SIRE的，将领的兵种适性和经验涨的很快。</p><ul><li>有特技为xx神的，xx将，主要是能产生暴击。(张飞，关羽，蒋钦，陈武，朱恒等)</li><li>有特技为辅佐的（满宠，吴懿，关平等）</li><li>统率和智力双高的，培养武力（卢植，司马懿，徐庶，田予，周瑜，陆逊等）</li><li>统率和武力双高的，培养智力（黄忠，太史慈，孙策，魏延，夏侯渊等）</li></ul><p>如果玩的史事剧本，寿命太短的就不要培养了。</p><p><strong>关于可以速推的城池</strong><br>南荆4城（武陵，零陵，贵阳，长沙），江陵出兵，带补给运输队，攻到长沙，南荆4城连城一片。<br>凉州3城（天水，威武，安定），汉中出兵，带补给运输队，攻到长安，前线为汉中和长安。<br>江东3城（建业，吴，会稽），庐江出兵，带补给运输队<br>益州2城（建宁，云南），成都出兵，带补给运输队<br>河北6城（邺，晋阳，平原，南皮，蓟，北平），陈留出兵邺城分兵攻打晋阳-&gt;蓟，主力攻打平原-&gt;南皮，在北平汇合，带补给运输队<br>徐州3城（小沛，下邳，北海），寿春出兵，带补给运输队，攻到北海</p><p><strong>关于偷渡攻击，四周强敌环绕，当地混不下去了，可以这么干</strong></p><ul><li>从洛阳进攻晋阳，相反也可以</li><li>从北海进攻襄平，相反也可以</li><li>从北海进攻吴，相反也可以</li><li>从零陵进攻建宁，相反也可以</li></ul><p><strong>关于研究技巧</strong><br>我喜欢精锐弩兵-&gt;精锐戟兵/精锐枪兵-&gt;精锐戟兵/精锐枪兵-&gt;军制改革-&gt;神火技，后面的随便研究。</p><p><strong>关于君主切换</strong><br>有的君主魅力和节操太差，寿命又很长，相性也不好（例如：袁术），可以让他非正常死亡，换一个节操高点的武将当君主。</p><p>具体思想就是火烧，可以自己点火，站火上，别人点火，站火上，有一定的几率烧死。</p><p><strong>关于出征将领忠诚太低，如何防止叛变</strong><br>立即结义或者结婚即可，并且结义和结婚出征时，能力可以互补。</p><p>例如：许诸和贾诩结义，许诸高攻，贾诩高统和高智，结义后，能力互补，在同一队伍，队伍的统率，武力智力得到互补。</p><p><strong>关于武将单挑</strong><br>和敌方将领带相同的兵种，武力值差不多的情况下，接受单挑的几率比较大。</p><p>关于单挑我喜欢重视防御，集气后，使用无双，使敌方受伤,容易抓到敌将。</p><p><strong>关于如何先手</strong><br>这个需要计算格子，我记得前期是5格。让敌方走到下一回合你能够得着的地方，先手上去打一顿。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;《&lt;a href=&quot;https://baike.baidu.com/item/%E4%B8%89%E5%9B%BD%E5%BF%9711%E5%A8%81%E5%8A%9B%E5%8A%A0%E5%BC%BA%E7%89%88&quot; target=&quot;_blank&quot; rel=&quot;n
      
    
    </summary>
    
    
      <category term="游戏,三国志,三国志11威力加强版" scheme="https://zhangangs.github.io/tags/%E6%B8%B8%E6%88%8F-%E4%B8%89%E5%9B%BD%E5%BF%97-%E4%B8%89%E5%9B%BD%E5%BF%9711%E5%A8%81%E5%8A%9B%E5%8A%A0%E5%BC%BA%E7%89%88/"/>
    
  </entry>
  
  <entry>
    <title>Shimo was unable to launch the IPSec backend service &#39;racoon&#39;</title>
    <link href="https://zhangangs.github.io/2019/08/20/Shimo%20was%20unable%20to%20launch%20the%20IPSec%20backend%20service%20&#39;racoon&#39;/"/>
    <id>https://zhangangs.github.io/2019/08/20/Shimo was unable to launch the IPSec backend service &#39;racoon&#39;/</id>
    <published>2019-08-19T16:00:00.000Z</published>
    <updated>2020-02-21T05:43:11.617Z</updated>
    
    <content type="html"><![CDATA[<p>在链接Shimo中的vpn时遇到的问题。</p><p><strong>错误提示如下：</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Could not start racoon daemon.</span><br><span class="line">Shimo was unable to launch the IPSec backend service <span class="string">'racoon'</span>.</span><br></pre></td></tr></table></figure></p><p>大概的意思就是无法启动‘racoon’进程。</p><p><strong>在国外网站上找到解决方法：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo killall racoon</span><br></pre></td></tr></table></figure></p><p>杀掉进程，在重新连接Shimo即可。</p><p>完美解决我的问题。</p><p>原文地址：<a href="https://apple.stackexchange.com/questions/292818/shimo-l2tp-vpn-not-connecting-to-racoon-daemon" target="_blank" rel="noopener">https://apple.stackexchange.com/questions/292818/shimo-l2tp-vpn-not-connecting-to-racoon-daemon</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在链接Shimo中的vpn时遇到的问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;错误提示如下：&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line
      
    
    </summary>
    
    
      <category term="Shimo" scheme="https://zhangangs.github.io/tags/Shimo/"/>
    
  </entry>
  
  <entry>
    <title>mac中Error occured while trying to proxy to问题解决</title>
    <link href="https://zhangangs.github.io/2019/07/01/mac%E4%B8%ADError%20occured%20while%20trying%20to%20proxy%20to%20/"/>
    <id>https://zhangangs.github.io/2019/07/01/mac中Error occured while trying to proxy to /</id>
    <published>2019-06-30T16:00:00.000Z</published>
    <updated>2020-02-21T05:43:11.619Z</updated>
    
    <content type="html"><![CDATA[<p>在本地服务器转发接口的时候遇到的问题,具体提示大概如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Error</span> occured <span class="keyword">while</span> trying to proxy localhost:<span class="number">9000</span>/cms/login </span><br><span class="line">to http:<span class="comment">//xxxxxxxx:8888 (ECONNREFUSED) </span></span><br><span class="line">(https:<span class="comment">//nodejs.org/api/errors.html#errors_common_system_errors)</span></span><br></pre></td></tr></table></figure><p>其实npm已经给出了问题答案<code>https://nodejs.org/api/errors.html#errors_common_system_errors</code>。</p><p>访问上面地址，浏览器中查找<code>ECONNREFUSED</code>字段，找到这么一段文字。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ENOTFOUND (DNS lookup failed): Indicates a DNS failure <span class="keyword">of</span> either EAI_NODATA or EAI_NONAME. This is not a standard POSIX error.</span><br></pre></td></tr></table></figure><p>看到这里，原来是DNS配置错误导致的问题，因为访问后台接口连了vpn，而解析不了这个DNS地址，所以报错了。。（</p><p>心里已经有解决方法了，，（稍等一下，为啥才到这里你就知道问题出在哪呢？因为我以前遇到过😄），<strong> 把后台接口地址，添加到hosts名单中即可 </strong>。</p><p><strong>1，根据网址查看ip地址 </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">nslookup example.com    //自己的网站地址</span><br><span class="line"></span><br><span class="line">返回：</span><br><span class="line">Server:10.111.2.253</span><br><span class="line">Address:10.111.2.253#53</span><br><span class="line"></span><br><span class="line">Name:example.com</span><br><span class="line">Address: 10.111.2.120</span><br></pre></td></tr></table></figure></p><p><strong>2，hosts文件中添加一条解析规则</strong><br>Mac系统如何编辑hosts文件<br><a href="https://jingyan.baidu.com/article/f3ad7d0f55154309c3345bdd.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/f3ad7d0f55154309c3345bdd.html</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 加一条解析规则到hosts中</span><br><span class="line">10.111.2.120    example.com</span><br></pre></td></tr></table></figure></p><p>刷新页面，完美解决问题！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在本地服务器转发接口的时候遇到的问题,具体提示大概如下：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span cla
      
    
    </summary>
    
    
      <category term="人性的弱点" scheme="https://zhangangs.github.io/tags/%E4%BA%BA%E6%80%A7%E7%9A%84%E5%BC%B1%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>《人性的弱点》节选：爸爸忘记了</title>
    <link href="https://zhangangs.github.io/2019/06/30/%E3%80%8A%E4%BA%BA%E6%80%A7%E7%9A%84%E5%BC%B1%E7%82%B9%E3%80%8B%E8%8A%82%E9%80%89%EF%BC%9A%E7%88%B8%E7%88%B8%E5%BF%98%E8%AE%B0%E4%BA%86/"/>
    <id>https://zhangangs.github.io/2019/06/30/《人性的弱点》节选：爸爸忘记了/</id>
    <published>2019-06-29T16:00:00.000Z</published>
    <updated>2020-02-21T05:43:11.620Z</updated>
    
    <content type="html"><![CDATA[<p>最近在看《人性的弱点》这本书，节选《爸爸忘记了》这篇文章，转载到我的博客，供时常回顾一下。</p><blockquote><p>让我们以理解代替指责，要舍身处地的去想一想对方为何如此，这比简单的批评要好的多。</p></blockquote><p>我想对你说，我的儿子：写下这些话时，你睡得正酣。你的小手放在脸蛋下面，弯曲的金发被汗水濡湿，紧贴着额头。我独自一人偷偷走进你的房间。几分钟之前，我在书房里读报时，强烈的懊悔折磨着我的内心。因此，这一刻，我歉疚地来到你的床边。</p><p>这些事始终在我心头萦绕，我的儿子：我之前一直对你乱发脾气。上学之前你不好好洗脸，我骂了你；你不把鞋擦干净，我又数落你；你把东西乱丢，我对你大声嚷嚷。</p><p>吃早餐时我也一直在挑你的毛病——你把饭洒了，你嚼得太快，你把胳膊肘放在桌子上，你面包上的黄油抹得太厚……你去玩的时候我正要出门赶火车，你转过身来，挥着小手对我喊：“爸爸再见！”我却紧皱眉头，以这句话回答你：“别驼背！”</p><p>下午又是如此。回家途中，我审视着你——你正跪在地上打弹珠，袜子都磨破了。我强行把你拽回家，让你在小伙伴面前丢脸。“袜子很贵的！等你自己赚钱的时候你就知道珍惜了！”你听听，我的儿子，这就是一个当父亲的说的话！</p><p>你还记得吗，后来我在书房里看报纸的时候，你怯生生地走过来，眼睛里闪过一丝伤心。我抬了抬眼，对你的打搅很不耐烦。你在门口犹疑着，而我却厉声问：“又有什么事？”</p><p>你什么都没说，只是一阵风似的跑过来，抱住我的脖子，亲了亲我。你的小胳膊紧紧地搂着我，上帝赐予的爱意如花朵般在你的心中盛开，连我的漠视都不曾令它枯萎。然后你就转身跑掉了，我听到你啪嗒啪嗒跑上楼的声音。</p><p>就在那时，我的儿子，报纸从我手中滑落，我心里充满了厌恶和惊惧——我什么时候变成了这样？吹毛求疵、任意斥责——这就是我对一个小男孩的回报。我不是不爱你，我的儿子，我只是对你抱有那么多的期待，总是用大人的标准衡量你。</p><p>你个性中有那么多优点，那么美好，那么真诚。你跑进来亲我，同我道晚安，幼小的心灵如同黎明破晓时点亮群山的阳光。今晚，其他任何事情都不再重要，我的儿子。我在你的床边悄悄跪下，心中充满愧疚。</p><p>我知道这忏悔于事无补，我知道你或许还不懂得这些话的含义，但是我下定决心，从明天起，要做一个合格的父亲。我要成为你最好的朋友，你难过的时候，我陪你难过，你大笑的时候，我陪你大笑。当不耐烦的言语再次涌到嘴边，我会闭紧双唇，提醒自己：“他还只是个孩子，一个小孩子！”</p><p>我很抱歉一直把你当作大人来对待。而现在，我仔细地端详着你，我的儿子，端详着你困倦地蜷伏在婴儿床里，此刻我才真真切切地意识到，你还那么小。仿佛就在昨天，你还躺在妈妈的臂弯里，依偎着她的肩膀。我对你要求得太多了，太多了……</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">原则：不要批评，不要指责，不要抱怨。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在看《人性的弱点》这本书，节选《爸爸忘记了》这篇文章，转载到我的博客，供时常回顾一下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;让我们以理解代替指责，要舍身处地的去想一想对方为何如此，这比简单的批评要好的多。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我想对你说，我的儿
      
    
    </summary>
    
    
      <category term="人性的弱点" scheme="https://zhangangs.github.io/tags/%E4%BA%BA%E6%80%A7%E7%9A%84%E5%BC%B1%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>一道算法题(打家劫舍)</title>
    <link href="https://zhangangs.github.io/2019/05/28/%E4%B8%80%E9%81%93%E7%AE%97%E6%B3%95%E9%A2%98(%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D)/"/>
    <id>https://zhangangs.github.io/2019/05/28/一道算法题(打家劫舍)/</id>
    <published>2019-05-27T16:00:00.000Z</published>
    <updated>2019-05-28T03:46:52.912Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://user-gold-cdn.xitu.io/2019/5/27/16af89fe0fadf8fc?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><p>这是掘金上面的一道算法题,原题是用python写的。我觉得JS递归也能实现，就试着写了一下：</p><p><strong>解题思路：</strong> </p><ul><li>找出数组中最大的金额</li><li>相邻房间不能闯入规则，去除相邻元素，切割数据</li><li>再找出最大的金额,，切割数组，依次递归调用</li></ul><p><strong>实现代码：</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'传入的数组为：'</span> + <span class="built_in">JSON</span>.stringify(arr));</span><br><span class="line"><span class="keyword">var</span> max = <span class="number">0</span>,</span><br><span class="line">index = <span class="number">0</span>,</span><br><span class="line">leftArr = [],</span><br><span class="line">rightArr = [],</span><br><span class="line">len = arr.length;</span><br><span class="line"><span class="comment">// 数组为空</span></span><br><span class="line"><span class="keyword">if</span> (arr.length == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr.length == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">// 只有一个值</span></span><br><span class="line"><span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 循环找到最大的值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> arr) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i] &gt; max) &#123;</span><br><span class="line">max = arr[i];</span><br><span class="line">index = +i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 根据最大的值,去掉左右各一位（相邻不能闯入规则）</span></span><br><span class="line">leftArr = index &gt; <span class="number">0</span> ? arr.slice(<span class="number">0</span>, index - <span class="number">1</span>) : [];</span><br><span class="line">rightArr = arr.slice(index + <span class="number">2</span>, len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> max + fn(leftArr) + fn(rightArr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> count = fn(arr);</span><br><span class="line"><span class="built_in">console</span>.log(count);</span><br></pre></td></tr></table></figure></p><p>应该还有更好的实现方式(&gt;_&lt;)</p><p>原文地址：<a href="https://juejin.im/post/5cebaded51882510627de993" target="_blank" rel="noopener">每日一道算法题–leetcode 198–打家劫舍–python</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/5/27/16af89fe0fadf8fc?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这
      
    
    </summary>
    
    
      <category term="算法" scheme="https://zhangangs.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Javascript学习知识点-持续更新</title>
    <link href="https://zhangangs.github.io/2019/05/05/Javascript%E5%AD%A6%E4%B9%A0%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>https://zhangangs.github.io/2019/05/05/Javascript学习知识点/</id>
    <published>2019-05-04T16:00:00.000Z</published>
    <updated>2019-05-06T07:24:58.145Z</updated>
    
    <content type="html"><![CDATA[<p>整理一下学习和工作中遇到的javascript中需要注意的地方。不用就是忘得快啊，写在这里方便自己以后复习吧，本文将持续更新。（<strong>首次更新于：2017-8-7</strong>）</p><p><strong> 1、小数点减法问题</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">0.3</span> - <span class="number">0.2</span>; <span class="comment">//结果是多少？</span></span><br></pre></td></tr></table></figure><p>这里的结果是：0.09999999999999998， 不是0.1，是不是很惊讶！</p><p><strong> 更神奇的还在后面！ </strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//循环显示10条相减的信息</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">11</span>; i++)&#123;</span><br><span class="line">  <span class="keyword">var</span> j = i + <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">console</span>.log((j / <span class="number">10</span>) + <span class="string">"-"</span> + (i / <span class="number">10</span>) + <span class="string">"="</span> + (( j / <span class="number">10</span>) - (i / <span class="number">10</span>)), i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果如下：<br><img src="http://oxi2boc62.bkt.clouddn.com/8-7-1.jpg" alt=""></p><p>除了<code>0.2-0.1</code>算对了，其他的都不对，不是大点就是小点。</p><p>这是由于二进制浮点数不能精确的表示简单的浮点数， 例如：0.1，只能表示一个及其近似的值。</p><p><strong>决解方法也很简单,转换成整数计算即可避免这个问题。</strong></p><p><strong>2、关于”任何数字除以0会返回NaN”</strong></p><p>这是《Javascript高级程序设计》中的话，似乎有点错误。这可能跟ECMAScript解释器有关。</p><p>只有0除以0才会返回NaN。其他数字除以0会返回Infinity（无穷大）。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span>/<span class="number">0</span>);  <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>/<span class="number">0</span>);  <span class="comment">//Infinity</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">-2</span>/<span class="number">0</span>); <span class="comment">//-Infinity</span></span><br></pre></td></tr></table></figure></p><p><strong>3、数组最大能有多少个值？</strong></p><p>数组最多可以包含<code>4 294 967 295</code> 个项。</p><p>不要问我为什么，某一天心血来潮，突然想起这个事情，就在网上找到了，博主没验证过这个数字(^_^)</p><p><strong>4、递归阶乘函数（严格模式可用）</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> factorial = (<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(num &lt;=<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num * f(num<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><strong>5、关于setTimeout和setInterval返回值</strong></p><p>他们的调用会返回一个数字ID，这个ID是计划执行函数唯一标识，可以用它来取消函数调用。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello world'</span>);</span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(timer); <span class="comment">//数值1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可用于清除定时器</span></span><br><span class="line">clearTimerout(timer);</span><br></pre></td></tr></table></figure></p><p><strong>6、获取URL中的传递的参数</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">locationSerch</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> local = <span class="built_in">window</span>.location.search;</span><br><span class="line">  <span class="comment">//检测url</span></span><br><span class="line">  <span class="keyword">if</span> (!local) &#123;<span class="built_in">console</span>.error(<span class="string">"没有参数"</span>); <span class="keyword">return</span> obj;&#125;</span><br><span class="line">  <span class="comment">//去掉？和切割成数组</span></span><br><span class="line">  <span class="keyword">var</span> arr = local.substr(<span class="number">1</span>).split(<span class="string">"&amp;"</span>);</span><br><span class="line">  <span class="comment">//数组循环储存到obj</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i =<span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> sp = arr[i].split(<span class="string">"="</span>);</span><br><span class="line">    obj[sp[<span class="number">0</span>]] = sp[<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//返回对象</span></span><br><span class="line">  <span class="keyword">return</span> obj[name];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(locationSerch(<span class="string">"name"</span>))   <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></p><p><strong>7、关于typeof 检测 NaN</strong></p><p>众所周知，<code>NaN</code>代表的意思是<strong>不是一个数字</strong>,那么用typeof检测<code>NaN</code>会返回什么类型呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span>(<span class="literal">NaN</span>);    <span class="comment">//number</span></span><br></pre></td></tr></table></figure><p>返回的是<code>number</code>类型，这就有点尴尬了，但是也能理解，基础类型就哪几种，<code>number</code>如果不合适，其他类型更不合适。</p><p><strong>8、千分位分割</strong></p><p>看到最多的是正则表达式操作。用原生的<code>toLocaleString()</code>也可实现相应功能。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">1234567890</span>;</span><br><span class="line">num.toLocaleString();  <span class="comment">//1,234,567,890</span></span><br></pre></td></tr></table></figure><p><strong>9、为什么获取数组的最后一个元素需要减1？</strong></p><p>因为数组的长度是从1开始计算（符合人类使用标准），而计算机是从0开始，</p><p>即：我们说的第一位，计算机表示的是0，所以取第一个元素为arr[0]，最后一个则为数组的长度减去1位则为arr.length-1。</p><p>没毛病，老铁~</p><p><strong>10、split()、slice()和splice()有什么区别</strong></p><ul><li><p><strong>split：</strong>用于字符串切割，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'1234'</span>;</span><br><span class="line"> str.split(<span class="string">''</span>); <span class="comment">//[1,2,3,4]</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> str = <span class="string">'1,25'</span>;</span><br><span class="line"> str.split(<span class="string">',); //[1,25]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>slice(start,end)</strong>:用于数组截取,不影响原数组。包含<code>start</code>，但不包含<code>end</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'red'</span>,<span class="string">'green'</span>,<span class="string">'blue'</span>];</span><br><span class="line">arr.slice(<span class="number">1</span>); <span class="comment">//['green','blue'];</span></span><br><span class="line">arr.slice(<span class="number">0</span>,<span class="number">2</span>); <span class="comment">//['red','green'];</span></span><br></pre></td></tr></table></figure></li><li><p><strong>splice</strong>:数组方法，可用于数组的删除、插入、替换等一系列操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'red'</span>,<span class="string">'green'</span>,<span class="string">'blue'</span>];</span><br><span class="line"><span class="comment">//删除'red'</span></span><br><span class="line">arr.splice(<span class="number">0</span>,<span class="number">1</span>); <span class="comment">//['red']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除'red'，再删除的位置插入任意数量的项目。</span></span><br><span class="line">arr.splice(<span class="number">0</span>,<span class="number">1</span>,<span class="string">'black'</span>,<span class="string">'yellow'</span>); <span class="comment">//["black", "yellow", "green", "blue"]</span></span><br><span class="line">arr.splice(<span class="number">0</span>,<span class="number">1</span>,[<span class="string">'black'</span>,<span class="string">'yellow'</span>]); <span class="comment">//[["black", "yellow"] "green", "blue"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//把'red'替换成'black'</span></span><br><span class="line">arr.splice(<span class="number">0</span>,<span class="number">1</span>,<span class="string">'black'</span>); <span class="comment">//["black", "green", "blue"]</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>11、一维数组转树状结构</strong> (<small>更新于：2019/3/24</small>)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterArray</span>(<span class="params">data, parent</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> tree = [];</span><br><span class="line">  <span class="keyword">let</span> temp;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (data[i].parentId === parent) &#123;</span><br><span class="line">        <span class="keyword">const</span> obj = data[i];</span><br><span class="line">        temp = <span class="keyword">this</span>.filterArray(data, data[i].userId);</span><br><span class="line">        <span class="keyword">if</span> (temp.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          obj.children = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        tree.push(obj);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>12、如何检测Object和Array</strong> (<small>更新于：2019/5/5</small>)</p><p>使用<code>typeof</code>检测数组和对象返回的都是<code>object</code>。</p><ul><li><p>使用<code>instanceof</code>，检测是否属于某个原型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(obj <span class="keyword">instanceof</span> <span class="built_in">Object</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>使用<code>constructor</code>,检测底层构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(arr.constructor === <span class="built_in">Array</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.constructor === <span class="built_in">Object</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>使用<code>isArray</code>方法，检测是否是数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(arr))) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(obj)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>13、两个变量互换,常见的几种方式</strong> (<small>更新于：2019/5/6</small>)</p><p>js常见的两个变量互换，例如：<code>var x =1, y =2</code></p><ul><li><p>1、添加一个缓存变量<code>z</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> z = y;</span><br><span class="line">y = x,</span><br><span class="line">x = z;</span><br><span class="line"><span class="built_in">console</span>.log(x,y); <span class="comment">// 2 1</span></span><br></pre></td></tr></table></figure></li><li><p>2、不使用三方变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = x + y;</span><br><span class="line">y = x - y;</span><br><span class="line">x = x - y;</span><br><span class="line"><span class="built_in">console</span>.log(x, y);</span><br></pre></td></tr></table></figure></li><li><p>3、es6 解构赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[x, y] = [y, x];</span><br><span class="line"><span class="built_in">console</span>.log(x, y);</span><br></pre></td></tr></table></figure></li><li><p>4、借用<code>object</code>交换数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = &#123;x,y&#125;;  <span class="comment">// es6简写,与x = &#123;x:x, y:y&#125;效果相同</span></span><br><span class="line">y = x.x;</span><br><span class="line">x = x.y;<span class="comment">// x最后赋值</span></span><br><span class="line"><span class="built_in">console</span>.log(x, y);</span><br></pre></td></tr></table></figure></li><li><p>5、借用<code>Array</code>交换数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = [x, y];</span><br><span class="line">y = x[<span class="number">0</span>];</span><br><span class="line">x = x[<span class="number">1</span>];</span><br><span class="line"><span class="built_in">console</span>.log(x, y);</span><br></pre></td></tr></table></figure></li></ul><p>文章中有考虑不全的地方，欢迎指正。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;整理一下学习和工作中遇到的javascript中需要注意的地方。不用就是忘得快啊，写在这里方便自己以后复习吧，本文将持续更新。（&lt;strong&gt;首次更新于：2017-8-7&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 1、小数点减法问题&lt;/strong&gt;&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://zhangangs.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>关于nvm切换node版本报错(&quot;该文件没有与之关联的应用来执行操作...&quot;)</title>
    <link href="https://zhangangs.github.io/2019/04/26/%E5%85%B3%E4%BA%8Envm%E5%88%87%E6%8D%A2node%E7%89%88%E6%9C%AC%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/"/>
    <id>https://zhangangs.github.io/2019/04/26/关于nvm切换node版本报错问题/</id>
    <published>2019-04-25T16:00:00.000Z</published>
    <updated>2019-04-26T11:15:39.916Z</updated>
    
    <content type="html"><![CDATA[<p>在切换nvm版本的遇到的问题：</p><p><img src="http://www.wailian.work/images/2019/04/26/_20190426185913.png" alt=""></p><p>我的问题出现在，<strong>使用了git Bash,而不是cmd 命令行</strong>，</p><p>改成windows自带的<code>cmd</code>命令行操作，就好了</p><p>(&gt;_&lt;)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在切换nvm版本的遇到的问题：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.wailian.work/images/2019/04/26/_20190426185913.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我的问题出现在，&lt;strong&gt;使用了git Bas
      
    
    </summary>
    
    
      <category term="nvm" scheme="https://zhangangs.github.io/tags/nvm/"/>
    
  </entry>
  
  <entry>
    <title>ionic 4中实现新闻滚动效果</title>
    <link href="https://zhangangs.github.io/2019/03/23/ionic%204%E4%B8%AD%E5%AE%9E%E7%8E%B0%E6%96%B0%E9%97%BB%E6%BB%9A%E5%8A%A8%E6%95%88%E6%9E%9C/"/>
    <id>https://zhangangs.github.io/2019/03/23/ionic 4中实现新闻滚动效果/</id>
    <published>2019-03-22T16:00:00.000Z</published>
    <updated>2019-03-23T13:04:57.510Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一个app项目，需要实现新闻滚动效果，如下所示：</p><p><img src="http://www.wailian.work/images/2019/03/23/11.gif" alt=""><br><small>(截图的图片有点卡)</small></p><p>原理很简单，第一个子元素向上移动一定的距离后，删除掉，再把删除的子元素插入到最后面就实现了滚动效果。</p><p>这个效果JQuery写起来应该很方便，但是<code>ionic</code>不支持JQuery,只能用angular自带的元素选择器.</p><p><strong>HTML部分</strong></p><p>这里的数据是从后台获取到的新闻列表，所以循环展示每条数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"body"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> *<span class="attr">ngFor</span>=<span class="string">"let item of resources.news"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont icon-laba"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;item.title&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>CSS部分</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.body</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">word-break</span>: keep-all;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">26px</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all .<span class="number">3s</span> linear;</span><br><span class="line">    i&#123;</span><br><span class="line">        <span class="selector-tag">font-size</span>: 1<span class="selector-class">.8rem</span>;</span><br><span class="line">        <span class="selector-tag">margin-right</span>: <span class="selector-class">.4rem</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.item</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">text-align</span>: left;</span><br><span class="line">        <span class="attribute">transition</span>: all .<span class="number">3s</span> linear;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>JS部分</strong></p><p>1、我们准备的数据格式如下：<code>articles:[{&quot;id&quot;: 360021084231,&quot;title&quot;: &quot;法币交易注意事项&quot;},{&quot;id&quot;: 360021084231,&quot;title&quot;: &quot;法币交易注意事项&quot;}]</code>,这是一段json数据。</p><p>2、在使用之前我们需要注入<code>ElementRef</code>和<code>Renderer2</code>,前一个是获取元素，后面一个是设置元素的属性。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;ElementRef, Renderer2&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br></pre></td></tr></table></figure></p><p>3、在<code>constructor</code>中注入<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(</span><br><span class="line">    private el: ElementRef,</span><br><span class="line">    private renderer2: Renderer2</span><br><span class="line">)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4、获取后台数据，操作dom元素.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.http.get(<span class="string">'api/xxxxxxx'</span>).subscribe(<span class="function">(<span class="params">res: any</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取到后台数据</span></span><br><span class="line">    <span class="keyword">this</span>.resources.news = res.articles;</span><br><span class="line">    <span class="comment">// 获取元素</span></span><br><span class="line">    <span class="keyword">const</span> _el = <span class="keyword">this</span>.el.nativeElement.querySelector(<span class="string">'.body'</span>);</span><br><span class="line">    <span class="comment">// 保存定时器，在后面用于销毁定时器</span></span><br><span class="line">    <span class="keyword">this</span>.data.timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> _item = _el.querySelector(<span class="string">'.item'</span>);</span><br><span class="line">        <span class="keyword">this</span>.renderer2.setStyle(_item, <span class="string">'marginTop'</span>, <span class="string">'-26px'</span>);</span><br><span class="line">        <span class="comment">// 等待动画执行完成后，操作的节点从前面删除，插入到最后面。</span></span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> _removeNode = _el.removeChild(_item);</span><br><span class="line">            _el.appendChild(_removeNode);</span><br><span class="line">            <span class="comment">// 删除marginTop属性，可以看成是还原属性，等待下次操作</span></span><br><span class="line">            <span class="keyword">this</span>.renderer2.removeStyle(_item, <span class="string">'marginTop'</span>);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在做一个app项目，需要实现新闻滚动效果，如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.wailian.work/images/2019/03/23/11.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;small&gt;(截图的图片有点卡)&lt;/small&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="ionic" scheme="https://zhangangs.github.io/tags/ionic/"/>
    
  </entry>
  
  <entry>
    <title>宋词分享：《定风波·南海归赠王定国侍人寓娘》</title>
    <link href="https://zhangangs.github.io/2019/01/21/%E5%AE%8B%E8%AF%8D%E5%88%86%E4%BA%AB%EF%BC%9A%E5%AE%9A%E9%A3%8E%E6%B3%A2%C2%B7%E5%8D%97%E6%B5%B7%E5%BD%92%E8%B5%A0%E7%8E%8B%E5%AE%9A%E5%9B%BD%E4%BE%8D%E4%BA%BA%E5%AF%93%E5%A8%98/"/>
    <id>https://zhangangs.github.io/2019/01/21/宋词分享：定风波·南海归赠王定国侍人寓娘/</id>
    <published>2019-01-20T16:00:00.000Z</published>
    <updated>2019-05-28T03:51:01.967Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.wailian.work/images/2019/03/08/015f3558abaebea801219c77aae8b3.jpg1280w_1l_2o_100sh.jpg" alt=""><br><small>(图片来源网络，侵删)</small></p><p><strong> 原文如下 </strong><br>作者：苏轼<br>常羡人间琢玉郎,天应乞与点酥娘。尽道清歌传皓齿。风起,雪飞炎海变清凉。<br>万里归来颜愈少。微笑，笑时犹带岭梅香。试问岭南应不好，却道：“此心安处是吾乡”。</p><p><strong> 译文 </strong><br>常常羡慕这世间如玉雕琢般丰神俊朗的男子，就连上天也怜惜他，赠予他柔美聪慧的佳人与之相伴。人人称道那女子歌声轻妙，笑容柔美，风起时，那歌声如雪片飞过炎热的夏日使世界变得清凉。<br>你从遥远的地方归来却看起来更加年轻了，笑容依旧，笑颜里好像还带着岭南梅花的清香；我问你：“岭南的风土应该不是很好吧？”。你却坦然答道：“我心安定的地方，便是我的故乡。”</p><p><strong> 个人赏析</strong><br>“无论海角于天涯，大抵心安即是家“，<img src="https://tb2.bdstatic.com/tb/editor/images/tsj/t_0001.gif" alt="">我要几生才能修得这种高尚的品格啊。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://www.wailian.work/images/2019/03/08/015f3558abaebea801219c77aae8b3.jpg1280w_1l_2o_100sh.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;small&gt;(图片来源网络，侵删
      
    
    </summary>
    
    
      <category term="宋词" scheme="https://zhangangs.github.io/tags/%E5%AE%8B%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>关于angularjs中的$q服务使用方法</title>
    <link href="https://zhangangs.github.io/2018/12/08/%E5%85%B3%E4%BA%8Eangularjs%E4%B8%AD%E7%9A%84$q%E6%9C%8D%E5%8A%A1%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>https://zhangangs.github.io/2018/12/08/关于angularjs中的$q服务使用方法/</id>
    <published>2018-12-07T16:00:00.000Z</published>
    <updated>2019-05-08T04:22:47.869Z</updated>
    
    <content type="html"><![CDATA[<p>网上介绍<code>$q</code>的文章有很多的，但是大多都差不多，其实<code>$q</code>用法很简单,我这里介绍2种我使用过的方法。</p><p><strong>1、简单的使用方式</strong> (等待某个接口完成请求后，在操作…)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 注册</span></span><br><span class="line">    <span class="keyword">var</span> deferred = $q.defer();</span><br><span class="line">    <span class="comment">// 请求接口</span></span><br><span class="line">    CoinCoin.favoriteQueryList(&#123;&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (res.httpCode == <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="comment">// 返回成功</span></span><br><span class="line">            deferred.resolve(res.data);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 失败</span></span><br><span class="line">            deferred.reject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回数据，会等待ajax执行完成会才会返回</span></span><br><span class="line">    <span class="keyword">return</span> deferred.promise;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>如何调用?</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口调用完成后执行</span></span><br><span class="line">getList().then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// res就是上面方法return的值</span></span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>2、循环调用</strong> (等待某一组接口完调用完成,再操作…) (<small>更新于：2019/5/6</small>)</p><p>在项目中我遇到过很多，这种需求。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据orderId查询策略师基本信息</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fundOrderById</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="comment">// 循环res列表[&#123;&#125;,&#123;&#125;,..]</span></span><br><span class="line">    angular.forEach(res.data.list, <span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">        result.push(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> deferred = $q.defer();</span><br><span class="line">            <span class="comment">// 调用接口</span></span><br><span class="line">            FundService.fundOrderById(&#123; <span class="attr">id</span>: item.orderId &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (res.httpCode == <span class="number">200</span>) &#123;</span><br><span class="line">                    <span class="comment">// 成功</span></span><br><span class="line">                    deferred.resolve(res.data);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 失败</span></span><br><span class="line">                    deferred.reject();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">return</span> deferred.promise;</span><br><span class="line">        &#125;())</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>如何调用？</strong> <code>$q.all().then()...</code>方式调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$q.all(fundOrderById(res)).then(<span class="function"><span class="keyword">function</span> (<span class="params">resp</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// resp中返回的是promise数据集合，循环操作即可</span></span><br><span class="line">    angular.forEach(res.data.list, <span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">        item.detailInfo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> resp) &#123;</span><br><span class="line">                <span class="keyword">if</span> (item.orderId == resp[i].id) &#123;</span><br><span class="line">                    <span class="keyword">return</span> resp[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>完成!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;网上介绍&lt;code&gt;$q&lt;/code&gt;的文章有很多的，但是大多都差不多，其实&lt;code&gt;$q&lt;/code&gt;用法很简单,我这里介绍2种我使用过的方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、简单的使用方式&lt;/strong&gt; (等待某个接口完成请求后，在操作…)&lt;/p&gt;
&lt;figu
      
    
    </summary>
    
    
      <category term="ajax" scheme="https://zhangangs.github.io/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>诗词分享</title>
    <link href="https://zhangangs.github.io/2018/12/01/%E8%AF%97%E8%AF%8D%E5%88%86%E4%BA%AB/"/>
    <id>https://zhangangs.github.io/2018/12/01/诗词分享/</id>
    <published>2018-11-30T16:00:00.000Z</published>
    <updated>2019-01-21T08:01:07.278Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.wailian.work/images/2019/01/21/1946680939031402439.jpg" alt=""></p><p>1、曾虑多情损梵行，入山又恐别倾城，世间安得双全法，不负如来不负卿。</p><blockquote><p>“这是仓央嘉措写的一首关于爱情诗句。这首诗表达了作者当时处在一个爱情和事业之间难以抉择的的矛盾心情中，<code>前两句的大概意思是：曾经担忧多情会对修行不利，想躲避尘世专修又不忍和佳人离别，后两句问道：世间有没有两全其美的法子呢？即不辜负佛陀的厚恩又不辜负心上人。</code>“<br>我还记得仓央嘉措写过的一段话:“<code>住进布达拉宫，我是雪域最大的王。流浪在拉萨街头，我是世间最美的情郎。</code>,”<br>“<em>这也太那啥、有才了吧，小师傅，能传授两招吗？</em>”</p></blockquote><p>2、一叶绽放一追寻，一花盛开一世界，一生相思为一人。</p><p>3、君生我未生，我生君已老。君恨我生迟，我恨君生早。恨不生同时，日日与君好。我离君天涯，君隔我海角。化蝶去寻花，夜夜栖芳草。</p><p>4、许我三千笔墨，绘你绝世倾城。</p><p>5、江天一色无纤尘，皎皎空中孤月轮。江畔何人初见月，江月何年初照人。</p><p>6、谁为你倾尽年华，谁又为你海角天涯。</p><p>7、薄情转是多情累，曲曲柔肠碎，红笺向壁字模糊，忆共灯前呵手为伊书。</p><p>8、南浦凄凄别，西风袅袅秋。一看肠一断，好去莫回头。</p><p>9、望夫处，江悠悠，化为石，不回头。山头日日风复雨，行人归来石应语。</p><p>10、我住长江头，君住长江尾；日日思君不见君，共饮长江水。</p><p>11、点一滴墨，倾一世魂。用一辈子的桃花运，换一场不分手的恋情。</p><p>12、一朝风雨，满地残红。湿了花香，几许悲凉，奈何世间无常。</p><p>13、纤云弄巧，飞星传恨，银汉迢迢暗渡。金风玉露一相逢，便胜却人间无数。柔情似水，佳期如梦，忍顾鹊桥归路。两情若是长久时，又岂在朝朝暮暮。</p><p>14、当我牵你衣袖，与你执手，我的生命便尽赋与你，相依相伴，或生，或死。</p><p>15、落花不解伊人苦，谁又怜惜伊人情。空伤悲，独愁怅，怎解此心凄凉。风吹，心冷，思念长；凝眸，望川，人断肠。同是断肠人，不知心伤几许。</p><p>16、执子之手，与子成说，终只是浮烟；死生契阔，与子偕老，都只是无果；红尘深处，我应劫而来，抽身，却已是心痕累累。</p><p>17、溪水落叶随风去，咿擎纸伞赴情约，迷离飘渺林雨间，夕红染指心间木。</p><p>18、一样花开一千年，独看沧海化桑田 ；一笑望穿一千年，几回知君到人间。</p><p>19、但曾相见便相知，相见何如不见时。安得与君相诀绝，免教生死作思。</p><p>20、雾绕山，雨敲伞。茫茫迷途不知返，徘徊人沧桑。抬头望，思难忘，纷纷落花水中残。梦空泣中恋。</p><p>21、无情不似多情苦，一寸还成千万缕。</p><p>22、伫倚危楼风细细，望极春愁，黯黯生天际。草色烟光残照里，无言谁会凭栏意。拟把疏狂图一醉，对酒当歌，强乐还无味。</p><p>23、油纸伞下，谁的情话，谁的天涯···</p><p>24、谁执掌着我的流年？用指尖轻触着琴键，弹唱我的悲哀？</p><p>25、花开彼岸本无岸，魂落忘川犹在川，醉里不知烟波浩，梦中依稀灯火寒。花叶千年不相见，缘尽缘生舞翩迁，花不解语花颔首，佛渡我心佛空叹。</p><p>26、一年春事，桃花红了谁。一眼回眸，尘缘遇了谁。一点灵犀，真情赠了谁。一把花锄，洒泪埋了谁。一句珍重，天涯送了谁。一番萧索，鱼书寄了谁。一帘幽梦，凭栏念了谁。一夕霜风，雪雨遣了谁。一江明月，回首少了谁。一杯浊酒，相逢醉了谁。一声低唱，才情痴了谁。一种相思，闲愁予了谁。</p><p>27、我愿化身一座石桥，经受五百年风吹，五百年日晒，五百年雨打，只求你从桥上走过···</p><p>28、轻吟一句情话，执笔一副情画。绽放一地情花，覆盖一片青瓦。共饮一杯清茶，同研一碗青砂。挽起一面轻纱，看清天边月牙。爱像水墨青花，何惧刹那芳华。</p><p>29、听弦断，断那三千痴缠。坠花湮，湮没一朝风涟。花若怜，落在谁的指尖。</p><p>30、静水流深，沧笙踏歌；三生阴晴圆缺，一朝悲欢离合</p><p>31、陪君醉笑三千场，不诉离殇；飞鸿过尽字字愁，情难思量，境花水月弹指间。和雨烟雨两不胜，天上人间一样愁。若有来生，为君倾城。</p><p>32、也许是前世的姻，也许是来生的缘，错在今生与你相见。</p><p>33、十里桃花霞满天，玉簪暗暗惜年华。对花影单望相护，只羡鸳鸯不羡仙。</p><p>34、今夕隔世百年一眼，相携而过，才知姹紫嫣红早已看遍。</p><p>35、月伴星，星傍月，繁星闪闪，月痴迷。花醉蝶，蝶恋花，蝶舞翩翩，花嫣然。</p><p>36、人生如旅，亦哭亦歌，曲终人散时，不过是痛者自痛，伤者自伤。一场梦境，一场繁华，荣华谢后，君临天下。我用一转身离开的你，我用一辈子来忘记。谁放了谁的手，谁比谁更难受？今生今世，来生来世，都会一直挂在心上。覆了天下也罢，始终不过一场繁华。</p><p>37、荷叶生时春恨生，荷叶枯时秋恨成。深知身在情长在，怅望江头江水声。</p><p>38、今朝有酒今朝醉， 明日愁来明日愁！</p><p>39、枝上柳绵吹又少，天涯何处无芳草！墙里秋千墙外道，墙外行人，墙里佳人笑。笑渐不闻声渐悄，多情却被无情恼。</p><p>40、阅尽天涯离别苦，不道归来，零落花如许。花底相看无一语，绿窗春与天莫。待把相思灯下诉，一缕新欢，旧恨千千缕。最是人间留不住，朱颜辞镜花辞树。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://www.wailian.work/images/2019/01/21/1946680939031402439.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;1、曾虑多情损梵行，入山又恐别倾城，世间安得双全法，不负如来不负卿。&lt;/p&gt;
&lt;block
      
    
    </summary>
    
    
      <category term="诗词" scheme="https://zhangangs.github.io/tags/%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>npm publish 报错 “code EPUBLISHCONFLICT”</title>
    <link href="https://zhangangs.github.io/2018/10/22/npm%20publish%20%E6%8A%A5%E9%94%99%20%E2%80%9Ccode%20EPUBLISHCONFLICT%E2%80%9D/"/>
    <id>https://zhangangs.github.io/2018/10/22/npm publish 报错 “code EPUBLISHCONFLICT”/</id>
    <published>2018-10-21T16:00:00.000Z</published>
    <updated>2018-12-01T08:31:57.596Z</updated>
    
    <content type="html"><![CDATA[<p>今天又遇到一个坑，<code>npm publish 报错 “code EPUBLISHCONFLICT”</code>，详情报错如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ npm publish</span><br><span class="line">npm ERR! code EPUBLISHCONFLICT</span><br><span class="line">npm ERR! publish fail Cannot publish over existing version.</span><br><span class="line">npm ERR! publish fail Update the <span class="string">'version'</span> field <span class="keyword">in</span> package.json and <span class="keyword">try</span> again.</span><br><span class="line">npm ERR! publish fail</span><br><span class="line">npm ERR! publish fail To automatically increment version numbers, <span class="attr">see</span>:</span><br><span class="line">npm ERR! publish fail     npm help version</span><br><span class="line"></span><br><span class="line">npm ERR! A complete log <span class="keyword">of</span> <span class="keyword">this</span> run can be found <span class="keyword">in</span>:</span><br><span class="line">npm ERR!     C:\Users\zhangang\AppData\Roaming\npm-cache\_logs\<span class="number">2018</span><span class="number">-10</span><span class="number">-22</span>T09_14_35_705Z-debug.log</span><br></pre></td></tr></table></figure><p>大概的意思是，代码冲突，需要更新发布版本号，再重新提交试试。</p><p>如果按照它的提示来弄，绝对的坑死人的节奏。<img src="https://tb2.bdstatic.com/tb/editor/images/tsj/t_0029.gif" alt=""></p><p><strong>我的<code>package.json</code> 如下所示：</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"wn-cli"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">"项目自动构建工具"</span>,</span><br><span class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"bin"</span>: &#123;</span><br><span class="line">    <span class="string">"wn"</span>: <span class="string">"./bin/base.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"repository"</span>: &#123;</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"git"</span>,</span><br><span class="line">    <span class="string">"url"</span>: <span class="string">"http://192.168.5.113/zhangang/wn-cli.git"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"author"</span>: <span class="string">"Veiss"</span>,</span><br><span class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="string">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"commander"</span>: <span class="string">"^2.19.0"</span>,</span><br><span class="line">    <span class="string">"shelljs"</span>: <span class="string">"^0.8.2"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>低调奢华的一段代码，跟代码冲突没有一毛钱的关系。<code>npm publish</code>怎么就失败了呢？</p><p><strong>最终问题出在<code>name</code>字段的”中划线”上面，去掉即可发布成功！</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"name"</span>: <span class="string">"wn-cli"</span>,<span class="string">`</span></span><br></pre></td></tr></table></figure><p>改成<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"name"</span>: <span class="string">"wncli"</span>,</span><br></pre></td></tr></table></figure></p><p>即可发布成功！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天又遇到一个坑，&lt;code&gt;npm publish 报错 “code EPUBLISHCONFLICT”&lt;/code&gt;，详情报错如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
      <category term="npm" scheme="https://zhangangs.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>用VMware安装Ubuntu防止简易安装</title>
    <link href="https://zhangangs.github.io/2018/08/27/%E7%94%A8VMware%E5%AE%89%E8%A3%85ubuntu%E9%98%B2%E6%AD%A2%E7%AE%80%E6%98%93%E5%AE%89%E8%A3%85/"/>
    <id>https://zhangangs.github.io/2018/08/27/用VMware安装ubuntu防止简易安装/</id>
    <published>2018-08-26T16:00:00.000Z</published>
    <updated>2018-12-01T08:31:57.603Z</updated>
    
    <content type="html"><![CDATA[<p>Ubuntu想安装一个中文版，搞了半天VMware，全都是自动简易安装，以为是版本的问题直接升到VMware 14，结果还是自动简易安装,我就是想装一个中文版的Ubuntu。</p><p>最后在网上查资料，解决了这个问题，在这里做一个记录，操作方法如下：</p><p><strong>第一步： 在新建虚拟机时，挂载光盘那步，不能挂载光盘，选最后一项 =&gt; 稍后安装操作系统</strong> </p><p><img src="http://oxi2boc62.bkt.clouddn.com/2018-8-27-01.png" alt=""></p><p><strong> 第二步：手动选择镜像文件 </strong></p><p><img src="http://oxi2boc62.bkt.clouddn.com/2018-8-27-02.jpg" alt=""></p><p><img src="http://oxi2boc62.bkt.clouddn.com/2018-8-27-03.jpg" alt=""></p><p>(图片来源网络)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Ubuntu想安装一个中文版，搞了半天VMware，全都是自动简易安装，以为是版本的问题直接升到VMware 14，结果还是自动简易安装,我就是想装一个中文版的Ubuntu。&lt;/p&gt;
&lt;p&gt;最后在网上查资料，解决了这个问题，在这里做一个记录，操作方法如下：&lt;/p&gt;
&lt;p&gt;&lt;
      
    
    </summary>
    
    
      <category term="VMware" scheme="https://zhangangs.github.io/tags/VMware/"/>
    
  </entry>
  
  <entry>
    <title>使用oclazyload.js自动引用bower安装的第三方插件</title>
    <link href="https://zhangangs.github.io/2018/07/31/%E4%BD%BF%E7%94%A8oclazyload.js%E8%87%AA%E5%8A%A8%E5%BC%95%E7%94%A8bower%E5%AE%89%E8%A3%85%E7%9A%84%E6%8F%92%E4%BB%B6/"/>
    <id>https://zhangangs.github.io/2018/07/31/使用oclazyload.js自动引用bower安装的插件/</id>
    <published>2018-07-30T16:00:00.000Z</published>
    <updated>2018-12-01T08:31:57.599Z</updated>
    
    <content type="html"><![CDATA[<p>还是在工作中遇到的问题，在项目改造中，我们使用了<code>oclazyload.js</code>来实现js按需加载，第三方插件当然也需要按需引用。</p><p>但是使用<code>oclazyload.js</code>需要遵行它的加载标准，需要使用的插件，按json格式引用到<code>modules</code>，大概需要像如下这样使用：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    <span class="keyword">var</span> app = angular.module(<span class="string">'app'</span>);</span><br><span class="line">    <span class="comment">//按需加载,modules内容为gulp自动化处理</span></span><br><span class="line">    app.config([<span class="string">'$ocLazyLoadProvider'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$ocLazyLoadProvider</span>) </span>&#123;</span><br><span class="line">        $ocLazyLoadProvider.config(&#123;</span><br><span class="line">            debug: <span class="literal">true</span>, <span class="comment">//调试模式</span></span><br><span class="line">            events: <span class="literal">true</span>,<span class="comment">//广播事件</span></span><br><span class="line">            modules: [  </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">"name"</span>:<span class="string">"angular"</span>,</span><br><span class="line">                    <span class="string">"files"</span>:<span class="string">"bower_components/angular/angular.js"</span></span><br><span class="line">                &#125;,&#123;</span><br><span class="line">                    <span class="string">"name"</span>:<span class="string">"ui-navbar"</span>,</span><br><span class="line">                    <span class="string">"files"</span>:[</span><br><span class="line">                        <span class="string">"bower_components/ui-navbar/release/js/ui-navbar.js"</span>,</span><br><span class="line">                        <span class="string">"bower_components/ui-navbar/release/css/ui-navbar.css"</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">                ...</span><br><span class="line">            ]</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;]);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><p>这样使用有个小问题需要解决，我们原来有很多的第三方插件，7、80个插件的样子，手动一个一个的引用进来，是可以用，但是如果又安装了新的插件，还是需要手动引用，这样很麻烦，而且手动引用难免出错。</p><p>我就寻思着，能不能自动加载<code>bower</code>安装的三方插件到<code>modules</code>中。找来找去没有找到类似的插件，那就自己写个吧。</p><p>于是，就写了个<code>gulp</code>任务，思路如此这般：<strong>找到bower_components地址，循环里面的文件夹，找到每个文件夹下的bower.json文件，再读取bower.json中的main字段，组合返回需要的json字段，再找到目标文件，写入需要的JSON。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取bower.json中插件的引用地址,写入app.config.js中</span></span><br><span class="line">gulp.task(<span class="string">'bmap'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//文件地址</span></span><br><span class="line">    <span class="keyword">var</span> filePath = path.join(__dirname, <span class="string">'client/bower_components'</span>),</span><br><span class="line">        <span class="comment">//文件夹下面的所有文件</span></span><br><span class="line">        files = fs.readdirSync(filePath),</span><br><span class="line">        <span class="comment">//需要返回的数据</span></span><br><span class="line">        bowerJson = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//循环读取文件夹</span></span><br><span class="line">    files.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> subPath = filePath + <span class="string">"/"</span> + item,</span><br><span class="line">            subFile = fs.readdirSync(subPath);</span><br><span class="line"></span><br><span class="line">        subFile.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">subItem, subIndex</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> path = subPath + <span class="string">"/bower.json"</span>;</span><br><span class="line">            <span class="keyword">if</span> (subItem == <span class="string">'bower.json'</span>) &#123;</span><br><span class="line">                <span class="comment">//同步方式读取bower.json文件</span></span><br><span class="line">                <span class="keyword">var</span> bowerData = fs.readFileSync(path, <span class="string">'utf-8'</span>),</span><br><span class="line">                    <span class="comment">//把bower.json字符串文件转换成json，提供给后续操作</span></span><br><span class="line">                    result = <span class="built_in">JSON</span>.parse(bowerData),</span><br><span class="line">                    <span class="comment">//返回的信息</span></span><br><span class="line">                    info = &#123;</span><br><span class="line">                        name: result.name,</span><br><span class="line">                        files: <span class="string">''</span></span><br><span class="line">                    &#125;;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//路径截取,保留bower_components/rangyrangy-core.js</span></span><br><span class="line">                subPath = subPath.substring(subPath.lastIndexOf(<span class="string">"bower_components\/"</span>), subPath.length);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//main字段有值才做处理;没有值，表示插件不规范，只能用户手动引入</span></span><br><span class="line">                <span class="keyword">if</span> (result.main) &#123;</span><br><span class="line">                    <span class="comment">//字符串和数组分开处理</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">typeof</span> (result.main) == <span class="string">'string'</span>) &#123;</span><br><span class="line">                        result.main = result.main.replace(<span class="string">'.\/'</span>, <span class="string">''</span>);</span><br><span class="line">                        info.files = subPath + <span class="string">'\/'</span> + result.main;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//数组,循环替换路径</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> (result.main) == <span class="string">'object'</span>) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> result.main) &#123;</span><br><span class="line">                            result.main[i] = result.main[i].replace(<span class="string">'.\/'</span>, <span class="string">''</span>);</span><br><span class="line">                            result.main[i] = subPath + <span class="string">'\/'</span> + result.main[i];</span><br><span class="line">                        &#125;</span><br><span class="line">                        info.files = result.main;</span><br><span class="line">                    &#125;</span><br><span class="line">                    bowerJson.push(info);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bowerJson.length) &#123;</span><br><span class="line">        <span class="comment">//把bowerJson注入到文件中app.config.js文件中</span></span><br><span class="line">        injectBowerJson(bowerJson);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">injectBowerJson</span>(<span class="params">bowerJson</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> configPath = path.join(__dirname, <span class="string">'client/app/app.config.js'</span>),</span><br><span class="line">            file = fs.readFileSync(configPath, <span class="string">'utf-8'</span>),</span><br><span class="line">            <span class="comment">//正则表达式替换文件</span></span><br><span class="line">            result = file.replace(<span class="regexp">/\[\&#123;.*?\&#125;\]/g</span>, <span class="built_in">JSON</span>.stringify(bowerJson));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写入文件</span></span><br><span class="line">        fs.writeFileSync(configPath, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>完成。没有找到其他的使用场景，不然可以写成插件。（^_^）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;还是在工作中遇到的问题，在项目改造中，我们使用了&lt;code&gt;oclazyload.js&lt;/code&gt;来实现js按需加载，第三方插件当然也需要按需引用。&lt;/p&gt;
&lt;p&gt;但是使用&lt;code&gt;oclazyload.js&lt;/code&gt;需要遵行它的加载标准，需要使用的插件，按json
      
    
    </summary>
    
    
      <category term="bower" scheme="https://zhangangs.github.io/tags/bower/"/>
    
  </entry>
  
  <entry>
    <title>音乐分享：Symphony (Cover by J.Fla)</title>
    <link href="https://zhangangs.github.io/2018/07/24/%E9%9F%B3%E4%B9%90%E5%88%86%E4%BA%AB%EF%BC%9ASymphony%20(Cover%20by%20J.Fla)/"/>
    <id>https://zhangangs.github.io/2018/07/24/音乐分享：Symphony (Cover by J.Fla)/</id>
    <published>2018-07-23T16:00:00.000Z</published>
    <updated>2018-12-01T08:31:57.606Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oxi2boc62.bkt.clouddn.com/2018-7-24-01.jpg" alt=""></p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=3&id=908038700&auto=1&height=66"></iframe></p><blockquote><p>此曲只应天上有，人间难得几回闻啊，不要问我为什么，就是喜欢。<img src="http://tb2.bdstatic.com/tb/editor/images/tsj/t_0035.gif" alt=""></p></blockquote><p><strong>MV地址：<a href="https://music.163.com/#/mv?id=5468230" target="_blank" rel="noopener">Symphony(Cover by J.Fla)</a>，博主无私分享！</strong></p><p><strong>翻译对照</strong><br>I’ve been hearing symphonies<br>我亲耳听见爱的交响曲</p><p>Before all I heard was silence<br>一切都沉默无声前</p><p>A rhapsody for you and me<br>这是专属你我之间的狂想曲</p><p>And every melody is timeless<br>每一段旋律都是永恒定格的</p><p>Life was stringing me along<br>生活像是将我们玩于股掌</p><p>Then you came and you cut me loose<br>直至你来将我解救</p><p>Was solo singing on my own<br>孤独无比的内心在独唱</p><p>Now I can’t find the key without you<br>如今无你我已找不到任何生存的意义</p><p>And now your song is on repeat<br>现在你的歌声回响在我的耳旁</p><p>And I’m dancin’ on, to your heartbeat<br>我每一次的纷纷起舞都会牵动着你的心跳</p><p>And when you’re gone, I feel incomplete<br>曲终人散，我不再完整无恙</p><p>So if you want the truth<br>若你想知道我心之所向</p><p>I just wanna be part of your symphony<br>我只想与你共同合唱交响乐</p><p>Will you hold me tight and not let go?<br>你会紧抱我，不会任其远走吗</p><p>Symphony<br>那爱的交响乐</p><p>Like a love song on the radio<br>就像收音机里的情歌</p><p>Will you hold me tight and not let go?<br>你会紧抱我，不会任其远走吗</p><p>I’m sorry if it’s all too much<br>若我言之过多，那么很抱歉</p><p>Every day you’re here, I’m healing<br>你存在的每一天，我的心像是得到治愈</p><p>And I was runnin’ outta luck<br>我很幸运</p><p>I never thought I’d find this feeling<br>我未想过会有心之萌动的感觉</p><p>‘Cause I’ve been hearing symphonies<br>因为我亲耳听见爱的交响乐</p><p>Before all I heard was silence<br>在我的内心是毫无波澜前</p><p>A rhapsody for you and me<br>专属你我的狂想曲</p><p>And every melody is timeless<br>每一段旋律都是永恒定格的</p><p>And now your song is on repeat<br>现在你的歌声回响在我的耳旁</p><p>And I’m dancin’ on, to your heartbeat<br>我每一次的纷纷起舞都会牵动着你的心跳</p><p>And when you’re gone, I feel incomplete<br>曲终人散，我不再完整无恙</p><p>So if you want the truth<br>若你想知道我心之所向</p><p>I just wanna be part of your symphony<br>我只想与你共同合唱交响乐</p><p>Will you hold me tight and not let go?<br>你会紧抱我，不会任其远走吗</p><p>Symphony<br>爱的交响</p><p>Like a love song on the radio<br>就像收音机里的情歌</p><p>Will you hold me tight and not let go?<br>你会紧抱我，不会任其远走吗</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://oxi2boc62.bkt.clouddn.com/2018-7-24-01.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginhei
      
    
    </summary>
    
    
      <category term="分享" scheme="https://zhangangs.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>收集数组Array操作集合</title>
    <link href="https://zhangangs.github.io/2018/07/19/%E6%94%B6%E9%9B%86%E6%95%B0%E7%BB%84Array%E6%93%8D%E4%BD%9C%E9%9B%86%E5%90%88/"/>
    <id>https://zhangangs.github.io/2018/07/19/收集数组Array操作集合/</id>
    <published>2018-07-18T16:00:00.000Z</published>
    <updated>2018-12-01T08:31:57.602Z</updated>
    
    <content type="html"><![CDATA[<p>收集遇到的数组操作集合，做些笔记，方便自己以后复习。一套操作下来，也是受益匪浅。</p><p><strong>“基础乃成功之根本，正在coding的某人如是说道(^_^)”。</strong></p><p><strong>1、数组自带的原生方法有哪些？</strong></p><ul><li><p><strong>push</strong>: 从数组尾部添加一项或多项数据，返回数组修改后的长度。</p></li><li><p><strong>pop</strong>: 从数组尾部删除一项，返回删除项。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.pop(); <span class="comment">//3</span></span><br></pre></td></tr></table></figure></li><li><p><strong>shift</strong>: 删除数组第一个元素，返回删除项。</p></li><li><strong>unshift</strong>: 向数组前面添加一个元素，返回数组修改后的长度。</li><li><strong>reverse</strong>:数组反转。</li><li><p><strong>sort</strong>：数组排序。默认情况下，按升序排序，最小的排到前面。<code>sort</code>排序会把每项转换成字符串,比较的是字符串，<code>排序数字的话不准确</code>，可以使用下面的方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以接受一个排序函数</span></span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a-b;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong>concat</strong>： 数组拼接，返回当前数组的副本。可用于数组浅拷贝。</p></li><li><p><strong>slice(start,end)</strong>：数组截取，返回当前数组的副本，可用于数组浅拷贝。包含<code>start</code>，不包含<code>end</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'red'</span>,<span class="string">'blue'</span>];</span><br><span class="line">arr.slice(<span class="number">0</span>); <span class="comment">//从第0位截取到最后一位，数组拷贝。</span></span><br><span class="line">arr.slice(<span class="number">1</span>); <span class="comment">//从第1位截取到最后一位。"['blue]"</span></span><br></pre></td></tr></table></figure></li><li><p><strong>splice</strong>: 删除数组元素。需要指定2个参数：需要删除项的索引（index）第和要删除的数量。返回删除的项。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'red'</span>,<span class="string">'blue'</span>,<span class="string">'yellow'</span>];</span><br><span class="line">arr.splice(<span class="number">0</span>,<span class="number">1</span>); <span class="comment">//['red']</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="string">'blue'</span>,<span class="string">'yellow'</span>]);</span><br></pre></td></tr></table></figure></li><li><p><strong>indexOf和lastIndexOf</strong>：查找位置索引，<code>indexOf</code>从数组开头位置0出开始先后查找，<code>lastIndexOf</code>相反。</p></li><li><p><strong>every、some、filter、forEach、map</strong>：数组迭代方法,</p><ul><li><p><code>every</code>循环每一项，都为满足条件才返回<code>true</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"><span class="keyword">var</span> result = numbers.every(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">0</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//true;</span></span><br></pre></td></tr></table></figure></li><li><p><code>some</code>有一项为真，就返回<code>true</code>，和<code>every</code>功能相反，使用方法类似。</p></li><li><p><code>filter</code>数组筛选。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"><span class="keyword">var</span> result = numbers.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">5</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//[6,7,8,9];</span></span><br></pre></td></tr></table></figure></li><li><p><code>map</code>数组循环，和<code>forEach</code>功能类似。返回一个数组</p></li><li><code>forEach</code>数组循环，和<code>for</code>循环类似。</li></ul></li><li><strong>reduce和reduceRight</strong>: 并归方法，这两个方法都会迭代数组的所有项，然后构建一个最终返回值。方法有4个参数：前面项的操作集合、当前值、索引、数组对象<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"><span class="keyword">var</span> result = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev,current,index,array</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(prev,current)</span><br><span class="line">    <span class="keyword">return</span> prev + current;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//45</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>2、数组检测<code>instanceof</code>和<code>isArray()</code></strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="comment">//instanceof是操作符</span></span><br><span class="line">arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>;  <span class="comment">//true</span></span><br><span class="line"><span class="built_in">Array</span>.isArray(arr); <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><p><strong>3、数组从左到右、从右到左循环</strong></p><ul><li><p>从左到右循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[i]);  <span class="comment">//1,2,3,4,5,6,7,8,9</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>从右到左循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = arr.length: i &gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[i]);  <span class="comment">//9,8,7,6,5,4,3,2,1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>4、查找数组中最大的值</strong></p><p>我觉得各种排序在这里适用。</p><ul><li><p>第一种：排序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">searchMax1</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr2 = arr.concat(); <span class="comment">//拷贝一份，不改变原来的数组结构</span></span><br><span class="line">    <span class="keyword">var</span> arr1 = arr2.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> arr1[arr2.length - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(searchMax1(arr));</span><br></pre></td></tr></table></figure></li><li><p>第二种：假设最大的一个就是arr[0]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">searchMax2</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr1 = arr.concat(); <span class="comment">//拷贝一份</span></span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">var</span> max = arr1[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr1[i] &gt; max) &#123;</span><br><span class="line">            max = arr1[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(searchMax2(arr));</span><br></pre></td></tr></table></figure></li><li><p>第三种：冒泡排序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">searchMax3</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr1 = arr.slice(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr1.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; arr1.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &lt; arr1[j]) &#123;</span><br><span class="line">                <span class="keyword">var</span> temp = arr1[i];</span><br><span class="line">                arr1[i] = arr1[j];</span><br><span class="line">                arr1[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr1[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(searchMax3(arr));</span><br></pre></td></tr></table></figure></li><li><p>第四种：自带的reduce方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">max</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(a, b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr.reduce(max));</span><br></pre></td></tr></table></figure></li><li><p>第五种：apply和Math结合(<strong>更新于：2018/7/25</strong>)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> max = <span class="built_in">Math</span>.max.apply(<span class="built_in">Math</span>, arr);</span><br></pre></td></tr></table></figure></li></ul><p><strong>5、数组和字符串相互转换</strong></p><ul><li><p>数组转字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</span><br><span class="line">arr.toString(); <span class="comment">//1,2,3,4,5,6,7</span></span><br><span class="line"><span class="comment">//是通过指定的分隔符进行分隔的。</span></span><br><span class="line">arr.join(<span class="string">','</span>); <span class="comment">//1,2,3,4,5,6,7</span></span><br></pre></td></tr></table></figure></li><li><p>字符串转数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="number">1234567</span>;</span><br><span class="line">str.split(<span class="string">''</span>); <span class="comment">//[1,2,3,4,5,6,7]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>;</span><br><span class="line">str.split(<span class="string">','</span>); <span class="comment">//[1,2,3,4,5,6,7]</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>6、数组深拷贝</strong></p><ul><li><p>第一种方法：for循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> arr)&#123;</span><br><span class="line">        resule[i] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arrCopy1 = deepCopy(arr);</span><br></pre></td></tr></table></figure></li><li><p>第二种方法：JSON转换,把数组转换成string，再转换成数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arrCopy2 = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringity(arr));</span><br></pre></td></tr></table></figure></li></ul><p>数组的浅拷贝可以使用<code>concat</code>、<code>slice</code>等自带的方法。</p><p><strong>7、数组去重</strong></p><ul><li><p>第一种：相邻元素对比</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique1</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr1 = arr.sort();  <span class="comment">//数组排序,改成有序</span></span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;arr1.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr1[i] != arr1[i+<span class="number">1</span>])&#123;</span><br><span class="line">            result.push(arr1[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第二种：indexOf</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique2</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length: i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(result.indexOf(arr[i]) == <span class="number">-1</span>)&#123;</span><br><span class="line">            result.push(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第三种：数组转对象。根据对象的键值唯一的特性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique3</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [],obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">        <span class="comment">//如果不存在相应的对象键值，表示当前值唯一。</span></span><br><span class="line">        <span class="keyword">if</span>(!obj[arr[i]])&#123;</span><br><span class="line">            obj[arr[i]] = <span class="number">1</span>;</span><br><span class="line">            result.push(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第四种：双循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique4</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">false</span>,result = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; result.length; j++)&#123;</span><br><span class="line">            <span class="comment">//在result数组找到相同的项，则为false</span></span><br><span class="line">            <span class="keyword">if</span>(arr[i] == result[j])&#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            result.push(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>文章中有考虑不全的地方，欢迎各位指正。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;收集遇到的数组操作集合，做些笔记，方便自己以后复习。一套操作下来，也是受益匪浅。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“基础乃成功之根本，正在coding的某人如是说道(^_^)”。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、数组自带的原生方法有哪些？&lt;/strong&gt;
      
    
    </summary>
    
    
      <category term="数组" scheme="https://zhangangs.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>关于css布局技巧和冷知识-持续更新</title>
    <link href="https://zhangangs.github.io/2018/07/15/%E6%95%B4%E7%90%86%E5%B7%A5%E4%BD%9C%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84css%E5%B8%83%E5%B1%80%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>https://zhangangs.github.io/2018/07/15/整理工作中遇到的css布局小技巧/</id>
    <published>2018-07-14T16:00:00.000Z</published>
    <updated>2018-12-01T08:31:57.603Z</updated>
    
    <content type="html"><![CDATA[<p>整理一下工作中用到过的css布局技巧，觉得很有新意的东西我都记录在这里。</p><p><strong> 本文将持续更新。（首次更新于：2017-7-28） </strong></p><p><strong> 1、小图标垂直居中，负边距的妙用 </strong></p><p>使用案例：select选择框右边小图标</p><p><img src="http://oxi2boc62.bkt.clouddn.com/7-28-15.png" alt=""></p><p>这里布局很简单，图标绝对定位到右边，<code>top:50%</code>的话，由于小图标自身有高度，定位的位置会居中偏下。<br>按照以前的方式我会减少top值，比如说改到45%，让它位置向上些。如果用到负边距，能很简单的解决这个问题，<code>margin-top</code> 设置为它自身的高度即可。即 <code>-10px</code>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</span><br><span class="line"><span class="selector-tag">right</span>: 8<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">top</span>: 50%;</span><br><span class="line">margin-top: -10px;  //设置为负值，自身高度</span><br><span class="line"><span class="selector-tag">font-size</span>: 20<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><p><strong> 2、文字强制一行显示，多余文字隐藏并加上省略号 </strong></p><p>写下来的原因是，这几个属性我用过很多次，但就是记不住（内牛满面ing..）。这次写到这里，方便以后查询。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">overflow</span><span class="selector-pseudo">:hidden</span>;</span><br><span class="line"><span class="selector-tag">white-space</span><span class="selector-pseudo">:nowrap</span>;</span><br><span class="line"><span class="selector-tag">text-overflow</span><span class="selector-pseudo">:ellipsis</span>;</span><br></pre></td></tr></table></figure></p><p><strong> 3、去除谷歌浏览器input框的黄色背景 </strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:-webkit-autofill</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0px</span> <span class="number">1000px</span> white inset;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong> 4、关于select标签中的option相关设置</strong></p><p>1、option能设置颜色和背景颜色和字体大小，设置<code>margin</code>和<code>padding</code>无效，设置<code>:hover</code>样式无效<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">select</span> &gt; <span class="selector-tag">option</span>&#123;</span><br><span class="line">  <span class="comment">/*有效属性*/</span></span><br><span class="line">  <span class="attribute">font-size</span>: red; </span><br><span class="line">  <span class="attribute">color</span>: red; </span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#333</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/*无效属性*/</span></span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;  </span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*无效属性*/</span></span><br><span class="line"> <span class="selector-tag">select</span> &gt; <span class="selector-tag">option</span><span class="selector-pseudo">:hover</span>&#123; </span><br><span class="line">    <span class="attribute">background</span>: red; </span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p><strong> 5、option只能是文本，添加html标签会被过滤掉  </strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--p标签会被过滤成文本--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>选择一<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>选择二<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>6、ID、class选择器为中文 </strong></p><p>在任何的文章中都不推荐使用中文选择器，但是我可以明确的告诉你，中文选择器是可以用的。 </p><p>嗯，汉化做得不错哦， 不但css可以用，js也是可以用的。 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//CSS</span><br><span class="line">#我的选择器&#123;</span><br><span class="line">  width: 500px;</span><br><span class="line">  height: 250px;</span><br><span class="line">  border: 1px solid red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//HTML</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"我的选择器"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//JAVASCRIPT</span><br><span class="line">"use strict";</span><br><span class="line">var _div = document.getElementById("我的选择器");</span><br><span class="line">_div.innerHTML = "我的ID是中文";</span><br><span class="line">console.log(_div);</span><br></pre></td></tr></table></figure><p>完全没问题，it is crazy！(简直太疯狂了)</p><p><strong>7、标签包含问题</strong></p><p>1、行内标签不能包含块级标签，但是转换成<code>block</code>或者<code>inline-block</code>可以。</p><p>2、p标签不能包含同类p标签和div标签。W3的html4.0.1明确规定P标签是不能包含块元素的。</p><p>我想可能跟P标签的特性有关吧，它有自动闭合的功能。把DIV加到P之间以后，浏览器就默认是两个不完整的P标签，然后就自动给它们添加了完整了。</p><p>js动态插入可以。</p><p><strong>8、position和float问题</strong></p><p><code>position</code>和<code>float</code>混用，positon为absolute和fixed时候，以positon为主，float无效；position为relative时，会浮动再相对定位。</p><p>1、positon和float有什么区别?</p><p>答：positon和floa布局都会脱离普通的文档流，position不再占用空间，float仍会占用位置。</p><p> 2、那么，position为absolute的时候，其父元素没有定位而祖先元素有定位，那么它是根据谁来定位？</p><p>答:根据祖先元素定位，而不是html。</p><p>3、有两个子元素都是<code>absolute</code>，<code>left</code>和 <code>top</code>都一样，谁会现在在上面？</p><p>谁后定义谁就显示在上面，html解析是从上到下,谁后解析到就排在上面。 可以使用<code>z-index</code>属性更改它的显示层级。</p><p><strong>9、css也支持变量，IE不支持此属性</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*定义变量*/</span></span><br><span class="line"><span class="selector-pseudo">:root</span>&#123;</span><br><span class="line">  <span class="attribute">--color</span>: red;</span><br><span class="line">  <span class="attribute">--borderRaius</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">--border</span>: <span class="number">1px</span> solid blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*变量引用*/</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--color);</span><br><span class="line">  <span class="attribute">border</span>: <span class="built_in">var</span>(--border);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="built_in">var</span>(--borderRadius);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>10、有的时候vertical-align: middle设置不起作用</strong></p><p>只要vertical-align父元素有ling-height，子元素就可以设置垂直居中。</p><p><strong>11、关于圣杯布局和双飞翼布局</strong></p><p>这是一种<code>css</code>布局技巧，<strong>要实现三栏布局，左右俩栏固定宽度，中间部分自适应。</strong></p><p>圣杯布局和双飞翼布局实现的思路差不多，通过css技巧，实现中间部分优先加载，不同点在于双飞翼布局中间部分需要在套一个子元素。</p><p>圣杯布局代码：<a href="https://sandbox.runjs.cn/show/reihrca5" target="_blank" rel="noopener">https://sandbox.runjs.cn/show/reihrca5</a></p><p>双飞翼布局代码：<a href="https://sandbox.runjs.cn/show/gipnukqk" target="_blank" rel="noopener">https://sandbox.runjs.cn/show/gipnukqk</a></p><p>网上有很多大神的文章，我就不再赘述，自己搞明白就好啦(^_^)。</p><p><strong>12、font-family设置了一堆字体，那么是哪个最先生效？</strong></p><p><code>font-family</code>是从第一个开始，如果浏览器不支持第一个字体，则会尝试下一个。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font-family: 'fontName1','fontName2','fontName3';</span><br></pre></td></tr></table></figure></p><p>文章中有考虑不全的地方，欢迎各位指正。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;整理一下工作中用到过的css布局技巧，觉得很有新意的东西我都记录在这里。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 本文将持续更新。（首次更新于：2017-7-28） &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 1、小图标垂直居中，负边距的妙用 &lt;/strong&gt;&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="css" scheme="https://zhangangs.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>解决npm警告：WARN registry Unexpected warning for httpsregistry.npmjs.org Miscellaneous Warning EINTEGRITY</title>
    <link href="https://zhangangs.github.io/2018/07/10/%E8%A7%A3%E5%86%B3npm%E8%AD%A6%E5%91%8A%EF%BC%9AWARN%20registry%20Unexpected%20warning%20for%20httpsregistry.npmjs.org%20Miscellaneous%20Warning%20EINTEGRITY/"/>
    <id>https://zhangangs.github.io/2018/07/10/解决npm警告：WARN registry Unexpected warning for httpsregistry.npmjs.org Miscellaneous Warning EINTEGRITY/</id>
    <published>2018-07-09T16:00:00.000Z</published>
    <updated>2018-12-01T08:31:57.605Z</updated>
    
    <content type="html"><![CDATA[<p>在安装npm插件的时候，又遇到一个坑。</p><p><code>WARN registry Unexpected warning for httpsregistry.npmjs.org Miscellaneous Warning EINTEGRITY</code></p><p>下面还有很多的错误信息….</p><p><strong>解决方法如下:</strong></p><p>1、删除已有的<code>node-modules</code>文件夹</p><p>2、删除项目下面的<code>package-lock.json</code>文件</p><p>3、重新运行<code>npm install</code></p><p><strong>备注：</strong> <em>cnpm安装的插件用不了，只能npm安装才能用，真的是不知道说啥好。</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在安装npm插件的时候，又遇到一个坑。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;WARN registry Unexpected warning for httpsregistry.npmjs.org Miscellaneous Warning EINTEGRITY&lt;/code&gt;&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="node" scheme="https://zhangangs.github.io/tags/node/"/>
    
  </entry>
  
</feed>
