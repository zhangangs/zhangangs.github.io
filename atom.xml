<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>飞鱼</title>
  
  <subtitle>天地有情尽白发，人间无意了沧桑</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhangangs.github.io/"/>
  <updated>2018-12-01T11:43:24.858Z</updated>
  <id>https://zhangangs.github.io/</id>
  
  <author>
    <name>zhangangs</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>诗词分享</title>
    <link href="https://zhangangs.github.io/2018/12/01/%E8%AF%97%E8%AF%8D%E5%88%86%E4%BA%AB/"/>
    <id>https://zhangangs.github.io/2018/12/01/诗词分享/</id>
    <published>2018-11-30T16:00:00.000Z</published>
    <updated>2018-12-01T11:43:24.858Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i1.bvimg.com/670562/bac01b72f67bfaf8.jpg" alt=""></p><p>1、曾虑多情损梵行，入山又恐别倾城，世间安得双全法，不负如来不负卿。</p><blockquote><p>“这是仓央嘉措写的一首关于爱情诗句。这首诗表达了作者当时处在一个爱情和事业之间难以抉择的的矛盾心情中，<code>前两句的大概意思是：曾经担忧多情会对修行不利，想躲避尘世专修又不忍和佳人离别，后两句问道：世间有没有两全其美的法子呢？即不辜负佛陀的厚恩又不辜负心上人。</code>“<br>我还记得仓央嘉措写过的一段话:“<code>住进布达拉宫，我是雪域最大的王。流浪在拉萨街头，我是世间最美的情郎。</code>,”<br>“<em>这也太那啥、有才了吧，小师傅，能传授两招吗？</em>”</p></blockquote><p>2、一叶绽放一追寻，一花盛开一世界，一生相思为一人。</p><p>3、君生我未生，我生君已老。君恨我生迟，我恨君生早。恨不生同时，日日与君好。我离君天涯，君隔我海角。化蝶去寻花，夜夜栖芳草。</p><p>4、许我三千笔墨，绘你绝世倾城。</p><p>5、江天一色无纤尘，皎皎空中孤月轮。江畔何人初见月，江月何年初照人。</p><p>6、谁为你倾尽年华，谁又为你海角天涯。</p><p>7、薄情转是多情累，曲曲柔肠碎，红笺向壁字模糊，忆共灯前呵手为伊书。</p><p>8、南浦凄凄别，西风袅袅秋。一看肠一断，好去莫回头。</p><p>9、望夫处，江悠悠，化为石，不回头。山头日日风复雨，行人归来石应语。</p><p>10、我住长江头，君住长江尾；日日思君不见君，共饮长江水。</p><p>11、点一滴墨，倾一世魂。用一辈子的桃花运，换一场不分手的恋情。</p><p>12、一朝风雨，满地残红。湿了花香，几许悲凉，奈何世间无常。</p><p>13、纤云弄巧，飞星传恨，银汉迢迢暗渡。金风玉露一相逢，便胜却人间无数。柔情似水，佳期如梦，忍顾鹊桥归路。两情若是长久时，又岂在朝朝暮暮。</p><p>14、当我牵你衣袖，与你执手，我的生命便尽赋与你，相依相伴，或生，或死。</p><p>15、落花不解伊人苦，谁又怜惜伊人情。空伤悲，独愁怅，怎解此心凄凉。风吹，心冷，思念长；凝眸，望川，人断肠。同是断肠人，不知心伤几许。</p><p>16、执子之手，与子成说，终只是浮烟；死生契阔，与子偕老，都只是无果；红尘深处，我应劫而来，抽身，却已是心痕累累。</p><p>17、溪水落叶随风去，咿擎纸伞赴情约，迷离飘渺林雨间，夕红染指心间木。</p><p>18、一样花开一千年，独看沧海化桑田 ；一笑望穿一千年，几回知君到人间。</p><p>19、但曾相见便相知，相见何如不见时。安得与君相诀绝，免教生死作思。</p><p>20、雾绕山，雨敲伞。茫茫迷途不知返，徘徊人沧桑。抬头望，思难忘，纷纷落花水中残。梦空泣中恋。</p><p>21、无情不似多情苦，一寸还成千万缕。</p><p>22、伫倚危楼风细细，望极春愁，黯黯生天际。草色烟光残照里，无言谁会凭栏意。拟把疏狂图一醉，对酒当歌，强乐还无味。</p><p>23、油纸伞下，谁的情话，谁的天涯···</p><p>24、谁执掌着我的流年？用指尖轻触着琴键，弹唱我的悲哀？</p><p>25、花开彼岸本无岸，魂落忘川犹在川，醉里不知烟波浩，梦中依稀灯火寒。花叶千年不相见，缘尽缘生舞翩迁，花不解语花颔首，佛渡我心佛空叹。</p><p>26、一年春事，桃花红了谁。一眼回眸，尘缘遇了谁。一点灵犀，真情赠了谁。一把花锄，洒泪埋了谁。一句珍重，天涯送了谁。一番萧索，鱼书寄了谁。一帘幽梦，凭栏念了谁。一夕霜风，雪雨遣了谁。一江明月，回首少了谁。一杯浊酒，相逢醉了谁。一声低唱，才情痴了谁。一种相思，闲愁予了谁。</p><p>27、我愿化身一座石桥，经受五百年风吹，五百年日晒，五百年雨打，只求你从桥上走过···</p><p>28、轻吟一句情话，执笔一副情画。绽放一地情花，覆盖一片青瓦。共饮一杯清茶，同研一碗青砂。挽起一面轻纱，看清天边月牙。爱像水墨青花，何惧刹那芳华。</p><p>29、听弦断，断那三千痴缠。坠花湮，湮没一朝风涟。花若怜，落在谁的指尖。</p><p>30、静水流深，沧笙踏歌；三生阴晴圆缺，一朝悲欢离合</p><p>31、陪君醉笑三千场，不诉离殇；飞鸿过尽字字愁，情难思量，境花水月弹指间。和雨烟雨两不胜，天上人间一样愁。若有来生，为君倾城。</p><p>32、也许是前世的姻，也许是来生的缘，错在今生与你相见。</p><p>33、十里桃花霞满天，玉簪暗暗惜年华。对花影单望相护，只羡鸳鸯不羡仙。</p><p>34、今夕隔世百年一眼，相携而过，才知姹紫嫣红早已看遍。</p><p>35、月伴星，星傍月，繁星闪闪，月痴迷。花醉蝶，蝶恋花，蝶舞翩翩，花嫣然。</p><p>36、人生如旅，亦哭亦歌，曲终人散时，不过是痛者自痛，伤者自伤。一场梦境，一场繁华，荣华谢后，君临天下。我用一转身离开的你，我用一辈子来忘记。谁放了谁的手，谁比谁更难受？今生今世，来生来世，都会一直挂在心上。覆了天下也罢，始终不过一场繁华。</p><p>37、荷叶生时春恨生，荷叶枯时秋恨成。深知身在情长在，怅望江头江水声。</p><p>38、今朝有酒今朝醉， 明日愁来明日愁！</p><p>39、枝上柳绵吹又少，天涯何处无芳草！墙里秋千墙外道，墙外行人，墙里佳人笑。笑渐不闻声渐悄，多情却被无情恼。</p><p>40、阅尽天涯离别苦，不道归来，零落花如许。花底相看无一语，绿窗春与天莫。待把相思灯下诉，一缕新欢，旧恨千千缕。最是人间留不住，朱颜辞镜花辞树。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://i1.bvimg.com/670562/bac01b72f67bfaf8.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;1、曾虑多情损梵行，入山又恐别倾城，世间安得双全法，不负如来不负卿。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“这是仓央嘉措写
      
    
    </summary>
    
    
      <category term="诗词" scheme="https://zhangangs.github.io/tags/%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>npm publish 报错 “code EPUBLISHCONFLICT”</title>
    <link href="https://zhangangs.github.io/2018/10/22/npm%20publish%20%E6%8A%A5%E9%94%99%20%E2%80%9Ccode%20EPUBLISHCONFLICT%E2%80%9D/"/>
    <id>https://zhangangs.github.io/2018/10/22/npm publish 报错 “code EPUBLISHCONFLICT”/</id>
    <published>2018-10-21T16:00:00.000Z</published>
    <updated>2018-12-01T08:31:57.596Z</updated>
    
    <content type="html"><![CDATA[<p>今天又遇到一个坑，<code>npm publish 报错 “code EPUBLISHCONFLICT”</code>，详情报错如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ npm publish</span><br><span class="line">npm ERR! code EPUBLISHCONFLICT</span><br><span class="line">npm ERR! publish fail Cannot publish over existing version.</span><br><span class="line">npm ERR! publish fail Update the <span class="string">'version'</span> field <span class="keyword">in</span> package.json and <span class="keyword">try</span> again.</span><br><span class="line">npm ERR! publish fail</span><br><span class="line">npm ERR! publish fail To automatically increment version numbers, <span class="attr">see</span>:</span><br><span class="line">npm ERR! publish fail     npm help version</span><br><span class="line"></span><br><span class="line">npm ERR! A complete log <span class="keyword">of</span> <span class="keyword">this</span> run can be found <span class="keyword">in</span>:</span><br><span class="line">npm ERR!     C:\Users\zhangang\AppData\Roaming\npm-cache\_logs\<span class="number">2018</span><span class="number">-10</span><span class="number">-22</span>T09_14_35_705Z-debug.log</span><br></pre></td></tr></table></figure><p>大概的意思是，代码冲突，需要更新发布版本号，再重新提交试试。</p><p>如果按照它的提示来弄，绝对的坑死人的节奏。<img src="https://tb2.bdstatic.com/tb/editor/images/tsj/t_0029.gif" alt=""></p><p><strong>我的<code>package.json</code> 如下所示：</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"wn-cli"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">"项目自动构建工具"</span>,</span><br><span class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"bin"</span>: &#123;</span><br><span class="line">    <span class="string">"wn"</span>: <span class="string">"./bin/base.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"repository"</span>: &#123;</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"git"</span>,</span><br><span class="line">    <span class="string">"url"</span>: <span class="string">"http://192.168.5.113/zhangang/wn-cli.git"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"author"</span>: <span class="string">"Veiss"</span>,</span><br><span class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="string">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"commander"</span>: <span class="string">"^2.19.0"</span>,</span><br><span class="line">    <span class="string">"shelljs"</span>: <span class="string">"^0.8.2"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>低调奢华的一段代码，跟代码冲突没有一毛钱的关系。<code>npm publish</code>怎么就失败了呢？</p><p><strong>最终问题出在<code>name</code>字段的”中划线”上面，去掉即可发布成功！</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"name"</span>: <span class="string">"wn-cli"</span>,<span class="string">`</span></span><br></pre></td></tr></table></figure><p>改成<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"name"</span>: <span class="string">"wncli"</span>,</span><br></pre></td></tr></table></figure></p><p>即可发布成功！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天又遇到一个坑，&lt;code&gt;npm publish 报错 “code EPUBLISHCONFLICT”&lt;/code&gt;，详情报错如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
      <category term="npm" scheme="https://zhangangs.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>用VMware安装Ubuntu防止简易安装</title>
    <link href="https://zhangangs.github.io/2018/08/27/%E7%94%A8VMware%E5%AE%89%E8%A3%85ubuntu%E9%98%B2%E6%AD%A2%E7%AE%80%E6%98%93%E5%AE%89%E8%A3%85/"/>
    <id>https://zhangangs.github.io/2018/08/27/用VMware安装ubuntu防止简易安装/</id>
    <published>2018-08-26T16:00:00.000Z</published>
    <updated>2018-12-01T08:31:57.603Z</updated>
    
    <content type="html"><![CDATA[<p>Ubuntu想安装一个中文版，搞了半天VMware，全都是自动简易安装，以为是版本的问题直接升到VMware 14，结果还是自动简易安装,我就是想装一个中文版的Ubuntu。</p><p>最后在网上查资料，解决了这个问题，在这里做一个记录，操作方法如下：</p><p><strong>第一步： 在新建虚拟机时，挂载光盘那步，不能挂载光盘，选最后一项 =&gt; 稍后安装操作系统</strong> </p><p><img src="http://oxi2boc62.bkt.clouddn.com/2018-8-27-01.png" alt=""></p><p><strong> 第二步：手动选择镜像文件 </strong></p><p><img src="http://oxi2boc62.bkt.clouddn.com/2018-8-27-02.jpg" alt=""></p><p><img src="http://oxi2boc62.bkt.clouddn.com/2018-8-27-03.jpg" alt=""></p><p>(图片来源网络)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Ubuntu想安装一个中文版，搞了半天VMware，全都是自动简易安装，以为是版本的问题直接升到VMware 14，结果还是自动简易安装,我就是想装一个中文版的Ubuntu。&lt;/p&gt;
&lt;p&gt;最后在网上查资料，解决了这个问题，在这里做一个记录，操作方法如下：&lt;/p&gt;
&lt;p&gt;&lt;
      
    
    </summary>
    
    
      <category term="VMware" scheme="https://zhangangs.github.io/tags/VMware/"/>
    
  </entry>
  
  <entry>
    <title>使用oclazyload.js自动引用bower安装的第三方插件</title>
    <link href="https://zhangangs.github.io/2018/07/31/%E4%BD%BF%E7%94%A8oclazyload.js%E8%87%AA%E5%8A%A8%E5%BC%95%E7%94%A8bower%E5%AE%89%E8%A3%85%E7%9A%84%E6%8F%92%E4%BB%B6/"/>
    <id>https://zhangangs.github.io/2018/07/31/使用oclazyload.js自动引用bower安装的插件/</id>
    <published>2018-07-30T16:00:00.000Z</published>
    <updated>2018-12-01T08:31:57.599Z</updated>
    
    <content type="html"><![CDATA[<p>还是在工作中遇到的问题，在项目改造中，我们使用了<code>oclazyload.js</code>来实现js按需加载，第三方插件当然也需要按需引用。</p><p>但是使用<code>oclazyload.js</code>需要遵行它的加载标准，需要使用的插件，按json格式引用到<code>modules</code>，大概需要像如下这样使用：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    <span class="keyword">var</span> app = angular.module(<span class="string">'app'</span>);</span><br><span class="line">    <span class="comment">//按需加载,modules内容为gulp自动化处理</span></span><br><span class="line">    app.config([<span class="string">'$ocLazyLoadProvider'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$ocLazyLoadProvider</span>) </span>&#123;</span><br><span class="line">        $ocLazyLoadProvider.config(&#123;</span><br><span class="line">            debug: <span class="literal">true</span>, <span class="comment">//调试模式</span></span><br><span class="line">            events: <span class="literal">true</span>,<span class="comment">//广播事件</span></span><br><span class="line">            modules: [  </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">"name"</span>:<span class="string">"angular"</span>,</span><br><span class="line">                    <span class="string">"files"</span>:<span class="string">"bower_components/angular/angular.js"</span></span><br><span class="line">                &#125;,&#123;</span><br><span class="line">                    <span class="string">"name"</span>:<span class="string">"ui-navbar"</span>,</span><br><span class="line">                    <span class="string">"files"</span>:[</span><br><span class="line">                        <span class="string">"bower_components/ui-navbar/release/js/ui-navbar.js"</span>,</span><br><span class="line">                        <span class="string">"bower_components/ui-navbar/release/css/ui-navbar.css"</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">                ...</span><br><span class="line">            ]</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;]);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><p>这样使用有个小问题需要解决，我们原来有很多的第三方插件，7、80个插件的样子，手动一个一个的引用进来，是可以用，但是如果又安装了新的插件，还是需要手动引用，这样很麻烦，而且手动引用难免出错。</p><p>我就寻思着，能不能自动加载<code>bower</code>安装的三方插件到<code>modules</code>中。找来找去没有找到类似的插件，那就自己写个吧。</p><p>于是，就写了个<code>gulp</code>任务，思路如此这般：<strong>找到bower_components地址，循环里面的文件夹，找到每个文件夹下的bower.json文件，再读取bower.json中的main字段，组合返回需要的json字段，再找到目标文件，写入需要的JSON。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取bower.json中插件的引用地址,写入app.config.js中</span></span><br><span class="line">gulp.task(<span class="string">'bmap'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//文件地址</span></span><br><span class="line">    <span class="keyword">var</span> filePath = path.join(__dirname, <span class="string">'client/bower_components'</span>),</span><br><span class="line">        <span class="comment">//文件夹下面的所有文件</span></span><br><span class="line">        files = fs.readdirSync(filePath),</span><br><span class="line">        <span class="comment">//需要返回的数据</span></span><br><span class="line">        bowerJson = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//循环读取文件夹</span></span><br><span class="line">    files.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> subPath = filePath + <span class="string">"/"</span> + item,</span><br><span class="line">            subFile = fs.readdirSync(subPath);</span><br><span class="line"></span><br><span class="line">        subFile.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">subItem, subIndex</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> path = subPath + <span class="string">"/bower.json"</span>;</span><br><span class="line">            <span class="keyword">if</span> (subItem == <span class="string">'bower.json'</span>) &#123;</span><br><span class="line">                <span class="comment">//同步方式读取bower.json文件</span></span><br><span class="line">                <span class="keyword">var</span> bowerData = fs.readFileSync(path, <span class="string">'utf-8'</span>),</span><br><span class="line">                    <span class="comment">//把bower.json字符串文件转换成json，提供给后续操作</span></span><br><span class="line">                    result = <span class="built_in">JSON</span>.parse(bowerData),</span><br><span class="line">                    <span class="comment">//返回的信息</span></span><br><span class="line">                    info = &#123;</span><br><span class="line">                        name: result.name,</span><br><span class="line">                        files: <span class="string">''</span></span><br><span class="line">                    &#125;;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//路径截取,保留bower_components/rangyrangy-core.js</span></span><br><span class="line">                subPath = subPath.substring(subPath.lastIndexOf(<span class="string">"bower_components\/"</span>), subPath.length);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//main字段有值才做处理;没有值，表示插件不规范，只能用户手动引入</span></span><br><span class="line">                <span class="keyword">if</span> (result.main) &#123;</span><br><span class="line">                    <span class="comment">//字符串和数组分开处理</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">typeof</span> (result.main) == <span class="string">'string'</span>) &#123;</span><br><span class="line">                        result.main = result.main.replace(<span class="string">'.\/'</span>, <span class="string">''</span>);</span><br><span class="line">                        info.files = subPath + <span class="string">'\/'</span> + result.main;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//数组,循环替换路径</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> (result.main) == <span class="string">'object'</span>) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> result.main) &#123;</span><br><span class="line">                            result.main[i] = result.main[i].replace(<span class="string">'.\/'</span>, <span class="string">''</span>);</span><br><span class="line">                            result.main[i] = subPath + <span class="string">'\/'</span> + result.main[i];</span><br><span class="line">                        &#125;</span><br><span class="line">                        info.files = result.main;</span><br><span class="line">                    &#125;</span><br><span class="line">                    bowerJson.push(info);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bowerJson.length) &#123;</span><br><span class="line">        <span class="comment">//把bowerJson注入到文件中app.config.js文件中</span></span><br><span class="line">        injectBowerJson(bowerJson);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">injectBowerJson</span>(<span class="params">bowerJson</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> configPath = path.join(__dirname, <span class="string">'client/app/app.config.js'</span>),</span><br><span class="line">            file = fs.readFileSync(configPath, <span class="string">'utf-8'</span>),</span><br><span class="line">            <span class="comment">//正则表达式替换文件</span></span><br><span class="line">            result = file.replace(<span class="regexp">/\[\&#123;.*?\&#125;\]/g</span>, <span class="built_in">JSON</span>.stringify(bowerJson));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写入文件</span></span><br><span class="line">        fs.writeFileSync(configPath, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>完成。没有找到其他的使用场景，不然可以写成插件。（^_^）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;还是在工作中遇到的问题，在项目改造中，我们使用了&lt;code&gt;oclazyload.js&lt;/code&gt;来实现js按需加载，第三方插件当然也需要按需引用。&lt;/p&gt;
&lt;p&gt;但是使用&lt;code&gt;oclazyload.js&lt;/code&gt;需要遵行它的加载标准，需要使用的插件，按json
      
    
    </summary>
    
    
      <category term="bower" scheme="https://zhangangs.github.io/tags/bower/"/>
    
  </entry>
  
  <entry>
    <title>音乐分享：Symphony (Cover by J.Fla)</title>
    <link href="https://zhangangs.github.io/2018/07/24/%E9%9F%B3%E4%B9%90%E5%88%86%E4%BA%AB%EF%BC%9ASymphony%20(Cover%20by%20J.Fla)/"/>
    <id>https://zhangangs.github.io/2018/07/24/音乐分享：Symphony (Cover by J.Fla)/</id>
    <published>2018-07-23T16:00:00.000Z</published>
    <updated>2018-12-01T08:31:57.606Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oxi2boc62.bkt.clouddn.com/2018-7-24-01.jpg" alt=""></p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=3&id=908038700&auto=1&height=66"></iframe></p><blockquote><p>此曲只应天上有，人间难得几回闻啊，不要问我为什么，就是喜欢。<img src="http://tb2.bdstatic.com/tb/editor/images/tsj/t_0035.gif" alt=""></p></blockquote><p><strong>MV地址：<a href="https://music.163.com/#/mv?id=5468230" target="_blank" rel="noopener">Symphony(Cover by J.Fla)</a>，博主无私分享！</strong></p><p><strong>翻译对照</strong><br>I’ve been hearing symphonies<br>我亲耳听见爱的交响曲</p><p>Before all I heard was silence<br>一切都沉默无声前</p><p>A rhapsody for you and me<br>这是专属你我之间的狂想曲</p><p>And every melody is timeless<br>每一段旋律都是永恒定格的</p><p>Life was stringing me along<br>生活像是将我们玩于股掌</p><p>Then you came and you cut me loose<br>直至你来将我解救</p><p>Was solo singing on my own<br>孤独无比的内心在独唱</p><p>Now I can’t find the key without you<br>如今无你我已找不到任何生存的意义</p><p>And now your song is on repeat<br>现在你的歌声回响在我的耳旁</p><p>And I’m dancin’ on, to your heartbeat<br>我每一次的纷纷起舞都会牵动着你的心跳</p><p>And when you’re gone, I feel incomplete<br>曲终人散，我不再完整无恙</p><p>So if you want the truth<br>若你想知道我心之所向</p><p>I just wanna be part of your symphony<br>我只想与你共同合唱交响乐</p><p>Will you hold me tight and not let go?<br>你会紧抱我，不会任其远走吗</p><p>Symphony<br>那爱的交响乐</p><p>Like a love song on the radio<br>就像收音机里的情歌</p><p>Will you hold me tight and not let go?<br>你会紧抱我，不会任其远走吗</p><p>I’m sorry if it’s all too much<br>若我言之过多，那么很抱歉</p><p>Every day you’re here, I’m healing<br>你存在的每一天，我的心像是得到治愈</p><p>And I was runnin’ outta luck<br>我很幸运</p><p>I never thought I’d find this feeling<br>我未想过会有心之萌动的感觉</p><p>‘Cause I’ve been hearing symphonies<br>因为我亲耳听见爱的交响乐</p><p>Before all I heard was silence<br>在我的内心是毫无波澜前</p><p>A rhapsody for you and me<br>专属你我的狂想曲</p><p>And every melody is timeless<br>每一段旋律都是永恒定格的</p><p>And now your song is on repeat<br>现在你的歌声回响在我的耳旁</p><p>And I’m dancin’ on, to your heartbeat<br>我每一次的纷纷起舞都会牵动着你的心跳</p><p>And when you’re gone, I feel incomplete<br>曲终人散，我不再完整无恙</p><p>So if you want the truth<br>若你想知道我心之所向</p><p>I just wanna be part of your symphony<br>我只想与你共同合唱交响乐</p><p>Will you hold me tight and not let go?<br>你会紧抱我，不会任其远走吗</p><p>Symphony<br>爱的交响</p><p>Like a love song on the radio<br>就像收音机里的情歌</p><p>Will you hold me tight and not let go?<br>你会紧抱我，不会任其远走吗</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://oxi2boc62.bkt.clouddn.com/2018-7-24-01.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginhei
      
    
    </summary>
    
    
      <category term="分享" scheme="https://zhangangs.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>收集数组Array操作集合</title>
    <link href="https://zhangangs.github.io/2018/07/19/%E6%94%B6%E9%9B%86%E6%95%B0%E7%BB%84Array%E6%93%8D%E4%BD%9C%E9%9B%86%E5%90%88/"/>
    <id>https://zhangangs.github.io/2018/07/19/收集数组Array操作集合/</id>
    <published>2018-07-18T16:00:00.000Z</published>
    <updated>2018-12-01T08:31:57.602Z</updated>
    
    <content type="html"><![CDATA[<p>收集遇到的数组操作集合，做些笔记，方便自己以后复习。一套操作下来，也是受益匪浅。</p><p><strong>“基础乃成功之根本，正在coding的某人如是说道(^_^)”。</strong></p><p><strong>1、数组自带的原生方法有哪些？</strong></p><ul><li><p><strong>push</strong>: 从数组尾部添加一项或多项数据，返回数组修改后的长度。</p></li><li><p><strong>pop</strong>: 从数组尾部删除一项，返回删除项。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.pop(); <span class="comment">//3</span></span><br></pre></td></tr></table></figure></li><li><p><strong>shift</strong>: 删除数组第一个元素，返回删除项。</p></li><li><strong>unshift</strong>: 向数组前面添加一个元素，返回数组修改后的长度。</li><li><strong>reverse</strong>:数组反转。</li><li><p><strong>sort</strong>：数组排序。默认情况下，按升序排序，最小的排到前面。<code>sort</code>排序会把每项转换成字符串,比较的是字符串，<code>排序数字的话不准确</code>，可以使用下面的方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以接受一个排序函数</span></span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a-b;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong>concat</strong>： 数组拼接，返回当前数组的副本。可用于数组浅拷贝。</p></li><li><p><strong>slice(start,end)</strong>：数组截取，返回当前数组的副本，可用于数组浅拷贝。包含<code>start</code>，不包含<code>end</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'red'</span>,<span class="string">'blue'</span>];</span><br><span class="line">arr.slice(<span class="number">0</span>); <span class="comment">//从第0位截取到最后一位，数组拷贝。</span></span><br><span class="line">arr.slice(<span class="number">1</span>); <span class="comment">//从第1位截取到最后一位。"['blue]"</span></span><br></pre></td></tr></table></figure></li><li><p><strong>splice</strong>: 删除数组元素。需要指定2个参数：需要删除项的索引（index）第和要删除的数量。返回删除的项。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'red'</span>,<span class="string">'blue'</span>,<span class="string">'yellow'</span>];</span><br><span class="line">arr.splice(<span class="number">0</span>,<span class="number">1</span>); <span class="comment">//['red']</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="string">'blue'</span>,<span class="string">'yellow'</span>]);</span><br></pre></td></tr></table></figure></li><li><p><strong>indexOf和lastIndexOf</strong>：查找位置索引，<code>indexOf</code>从数组开头位置0出开始先后查找，<code>lastIndexOf</code>相反。</p></li><li><p><strong>every、some、filter、forEach、map</strong>：数组迭代方法,</p><ul><li><p><code>every</code>循环每一项，都为满足条件才返回<code>true</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"><span class="keyword">var</span> result = numbers.every(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">0</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//true;</span></span><br></pre></td></tr></table></figure></li><li><p><code>some</code>有一项为真，就返回<code>true</code>，和<code>every</code>功能相反，使用方法类似。</p></li><li><p><code>filter</code>数组筛选。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"><span class="keyword">var</span> result = numbers.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">5</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//[6,7,8,9];</span></span><br></pre></td></tr></table></figure></li><li><p><code>map</code>数组循环，和<code>forEach</code>功能类似。返回一个数组</p></li><li><code>forEach</code>数组循环，和<code>for</code>循环类似。</li></ul></li><li><strong>reduce和reduceRight</strong>: 并归方法，这两个方法都会迭代数组的所有项，然后构建一个最终返回值。方法有4个参数：前面项的操作集合、当前值、索引、数组对象<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"><span class="keyword">var</span> result = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev,current,index,array</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(prev,current)</span><br><span class="line">    <span class="keyword">return</span> prev + current;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//45</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>2、数组检测<code>instanceof</code>和<code>isArray()</code></strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="comment">//instanceof是操作符</span></span><br><span class="line">arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>;  <span class="comment">//true</span></span><br><span class="line"><span class="built_in">Array</span>.isArray(arr); <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><p><strong>3、数组从左到右、从右到左循环</strong></p><ul><li><p>从左到右循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[i]);  <span class="comment">//1,2,3,4,5,6,7,8,9</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>从右到左循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = arr.length: i &gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[i]);  <span class="comment">//9,8,7,6,5,4,3,2,1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>4、查找数组中最大的值</strong></p><p>我觉得各种排序在这里适用。</p><ul><li><p>第一种：排序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">searchMax1</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr2 = arr.concat(); <span class="comment">//拷贝一份，不改变原来的数组结构</span></span><br><span class="line">    <span class="keyword">var</span> arr1 = arr2.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> arr1[arr2.length - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(searchMax1(arr));</span><br></pre></td></tr></table></figure></li><li><p>第二种：假设最大的一个就是arr[0]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">searchMax2</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr1 = arr.concat(); <span class="comment">//拷贝一份</span></span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">var</span> max = arr1[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr1[i] &gt; max) &#123;</span><br><span class="line">            max = arr1[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(searchMax2(arr));</span><br></pre></td></tr></table></figure></li><li><p>第三种：冒泡排序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">searchMax3</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr1 = arr.slice(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr1.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; arr1.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &lt; arr1[j]) &#123;</span><br><span class="line">                <span class="keyword">var</span> temp = arr1[i];</span><br><span class="line">                arr1[i] = arr1[j];</span><br><span class="line">                arr1[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr1[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(searchMax3(arr));</span><br></pre></td></tr></table></figure></li><li><p>第四种：自带的reduce方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">max</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(a, b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr.reduce(max));</span><br></pre></td></tr></table></figure></li><li><p>第五种：apply和Math结合(<strong>更新于：2018/7/25</strong>)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> max = <span class="built_in">Math</span>.max.apply(<span class="built_in">Math</span>, arr);</span><br></pre></td></tr></table></figure></li></ul><p><strong>5、数组和字符串相互转换</strong></p><ul><li><p>数组转字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</span><br><span class="line">arr.toString(); <span class="comment">//1,2,3,4,5,6,7</span></span><br><span class="line"><span class="comment">//是通过指定的分隔符进行分隔的。</span></span><br><span class="line">arr.join(<span class="string">','</span>); <span class="comment">//1,2,3,4,5,6,7</span></span><br></pre></td></tr></table></figure></li><li><p>字符串转数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="number">1234567</span>;</span><br><span class="line">str.split(<span class="string">''</span>); <span class="comment">//[1,2,3,4,5,6,7]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>;</span><br><span class="line">str.split(<span class="string">','</span>); <span class="comment">//[1,2,3,4,5,6,7]</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>6、数组深拷贝</strong></p><ul><li><p>第一种方法：for循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> arr)&#123;</span><br><span class="line">        resule[i] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arrCopy1 = deepCopy(arr);</span><br></pre></td></tr></table></figure></li><li><p>第二种方法：JSON转换,把数组转换成string，再转换成数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arrCopy2 = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringity(arr));</span><br></pre></td></tr></table></figure></li></ul><p>数组的浅拷贝可以使用<code>concat</code>、<code>slice</code>等自带的方法。</p><p><strong>7、数组去重</strong></p><ul><li><p>第一种：相邻元素对比</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique1</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr1 = arr.sort();  <span class="comment">//数组排序,改成有序</span></span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;arr1.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr1[i] != arr1[i+<span class="number">1</span>])&#123;</span><br><span class="line">            result.push(arr1[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第二种：indexOf</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique2</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length: i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(result.indexOf(arr[i]) == <span class="number">-1</span>)&#123;</span><br><span class="line">            result.push(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第三种：数组转对象。根据对象的键值唯一的特性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique3</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [],obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">        <span class="comment">//如果不存在相应的对象键值，表示当前值唯一。</span></span><br><span class="line">        <span class="keyword">if</span>(!obj[arr[i]])&#123;</span><br><span class="line">            obj[arr[i]] = <span class="number">1</span>;</span><br><span class="line">            result.push(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第四种：双循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique4</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">false</span>,result = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; result.length; j++)&#123;</span><br><span class="line">            <span class="comment">//在result数组找到相同的项，则为false</span></span><br><span class="line">            <span class="keyword">if</span>(arr[i] == result[j])&#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            result.push(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>文章中有考虑不全的地方，欢迎各位指正。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;收集遇到的数组操作集合，做些笔记，方便自己以后复习。一套操作下来，也是受益匪浅。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“基础乃成功之根本，正在coding的某人如是说道(^_^)”。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、数组自带的原生方法有哪些？&lt;/strong&gt;
      
    
    </summary>
    
    
      <category term="数组" scheme="https://zhangangs.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>关于css布局技巧和冷知识-持续更新</title>
    <link href="https://zhangangs.github.io/2018/07/15/%E6%95%B4%E7%90%86%E5%B7%A5%E4%BD%9C%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84css%E5%B8%83%E5%B1%80%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>https://zhangangs.github.io/2018/07/15/整理工作中遇到的css布局小技巧/</id>
    <published>2018-07-14T16:00:00.000Z</published>
    <updated>2018-12-01T08:31:57.603Z</updated>
    
    <content type="html"><![CDATA[<p>整理一下工作中用到过的css布局技巧，觉得很有新意的东西我都记录在这里。</p><p><strong> 本文将持续更新。（首次更新于：2017-7-28） </strong></p><p><strong> 1、小图标垂直居中，负边距的妙用 </strong></p><p>使用案例：select选择框右边小图标</p><p><img src="http://oxi2boc62.bkt.clouddn.com/7-28-15.png" alt=""></p><p>这里布局很简单，图标绝对定位到右边，<code>top:50%</code>的话，由于小图标自身有高度，定位的位置会居中偏下。<br>按照以前的方式我会减少top值，比如说改到45%，让它位置向上些。如果用到负边距，能很简单的解决这个问题，<code>margin-top</code> 设置为它自身的高度即可。即 <code>-10px</code>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</span><br><span class="line"><span class="selector-tag">right</span>: 8<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">top</span>: 50%;</span><br><span class="line">margin-top: -10px;  //设置为负值，自身高度</span><br><span class="line"><span class="selector-tag">font-size</span>: 20<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><p><strong> 2、文字强制一行显示，多余文字隐藏并加上省略号 </strong></p><p>写下来的原因是，这几个属性我用过很多次，但就是记不住（内牛满面ing..）。这次写到这里，方便以后查询。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">overflow</span><span class="selector-pseudo">:hidden</span>;</span><br><span class="line"><span class="selector-tag">white-space</span><span class="selector-pseudo">:nowrap</span>;</span><br><span class="line"><span class="selector-tag">text-overflow</span><span class="selector-pseudo">:ellipsis</span>;</span><br></pre></td></tr></table></figure></p><p><strong> 3、去除谷歌浏览器input框的黄色背景 </strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:-webkit-autofill</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0px</span> <span class="number">1000px</span> white inset;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong> 4、关于select标签中的option相关设置</strong></p><p>1、option能设置颜色和背景颜色和字体大小，设置<code>margin</code>和<code>padding</code>无效，设置<code>:hover</code>样式无效<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">select</span> &gt; <span class="selector-tag">option</span>&#123;</span><br><span class="line">  <span class="comment">/*有效属性*/</span></span><br><span class="line">  <span class="attribute">font-size</span>: red; </span><br><span class="line">  <span class="attribute">color</span>: red; </span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#333</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/*无效属性*/</span></span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;  </span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*无效属性*/</span></span><br><span class="line"> <span class="selector-tag">select</span> &gt; <span class="selector-tag">option</span><span class="selector-pseudo">:hover</span>&#123; </span><br><span class="line">    <span class="attribute">background</span>: red; </span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p><strong> 5、option只能是文本，添加html标签会被过滤掉  </strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--p标签会被过滤成文本--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>选择一<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>选择二<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>6、ID、class选择器为中文 </strong></p><p>在任何的文章中都不推荐使用中文选择器，但是我可以明确的告诉你，中文选择器是可以用的。 </p><p>嗯，汉化做得不错哦， 不但css可以用，js也是可以用的。 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//CSS</span><br><span class="line">#我的选择器&#123;</span><br><span class="line">  width: 500px;</span><br><span class="line">  height: 250px;</span><br><span class="line">  border: 1px solid red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//HTML</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"我的选择器"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//JAVASCRIPT</span><br><span class="line">"use strict";</span><br><span class="line">var _div = document.getElementById("我的选择器");</span><br><span class="line">_div.innerHTML = "我的ID是中文";</span><br><span class="line">console.log(_div);</span><br></pre></td></tr></table></figure><p>完全没问题，it is crazy！(简直太疯狂了)</p><p><strong>7、标签包含问题</strong></p><p>1、行内标签不能包含块级标签，但是转换成<code>block</code>或者<code>inline-block</code>可以。</p><p>2、p标签不能包含同类p标签和div标签。W3的html4.0.1明确规定P标签是不能包含块元素的。</p><p>我想可能跟P标签的特性有关吧，它有自动闭合的功能。把DIV加到P之间以后，浏览器就默认是两个不完整的P标签，然后就自动给它们添加了完整了。</p><p>js动态插入可以。</p><p><strong>8、position和float问题</strong></p><p><code>position</code>和<code>float</code>混用，positon为absolute和fixed时候，以positon为主，float无效；position为relative时，会浮动再相对定位。</p><p>1、positon和float有什么区别?</p><p>答：positon和floa布局都会脱离普通的文档流，position不再占用空间，float仍会占用位置。</p><p> 2、那么，position为absolute的时候，其父元素没有定位而祖先元素有定位，那么它是根据谁来定位？</p><p>答:根据祖先元素定位，而不是html。</p><p>3、有两个子元素都是<code>absolute</code>，<code>left</code>和 <code>top</code>都一样，谁会现在在上面？</p><p>谁后定义谁就显示在上面，html解析是从上到下,谁后解析到就排在上面。 可以使用<code>z-index</code>属性更改它的显示层级。</p><p><strong>9、css也支持变量，IE不支持此属性</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*定义变量*/</span></span><br><span class="line"><span class="selector-pseudo">:root</span>&#123;</span><br><span class="line">  <span class="attribute">--color</span>: red;</span><br><span class="line">  <span class="attribute">--borderRaius</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">--border</span>: <span class="number">1px</span> solid blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*变量引用*/</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--color);</span><br><span class="line">  <span class="attribute">border</span>: <span class="built_in">var</span>(--border);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="built_in">var</span>(--borderRadius);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>10、有的时候vertical-align: middle设置不起作用</strong></p><p>只要vertical-align父元素有ling-height，子元素就可以设置垂直居中。</p><p><strong>11、关于圣杯布局和双飞翼布局</strong></p><p>这是一种<code>css</code>布局技巧，<strong>要实现三栏布局，左右俩栏固定宽度，中间部分自适应。</strong></p><p>圣杯布局和双飞翼布局实现的思路差不多，通过css技巧，实现中间部分优先加载，不同点在于双飞翼布局中间部分需要在套一个子元素。</p><p>圣杯布局代码：<a href="https://sandbox.runjs.cn/show/reihrca5" target="_blank" rel="noopener">https://sandbox.runjs.cn/show/reihrca5</a></p><p>双飞翼布局代码：<a href="https://sandbox.runjs.cn/show/gipnukqk" target="_blank" rel="noopener">https://sandbox.runjs.cn/show/gipnukqk</a></p><p>网上有很多大神的文章，我就不再赘述，自己搞明白就好啦(^_^)。</p><p><strong>12、font-family设置了一堆字体，那么是哪个最先生效？</strong></p><p><code>font-family</code>是从第一个开始，如果浏览器不支持第一个字体，则会尝试下一个。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font-family: 'fontName1','fontName2','fontName3';</span><br></pre></td></tr></table></figure></p><p>文章中有考虑不全的地方，欢迎各位指正。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;整理一下工作中用到过的css布局技巧，觉得很有新意的东西我都记录在这里。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 本文将持续更新。（首次更新于：2017-7-28） &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 1、小图标垂直居中，负边距的妙用 &lt;/strong&gt;&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="css" scheme="https://zhangangs.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Javascript学习知识点-持续更新</title>
    <link href="https://zhangangs.github.io/2018/07/15/Javascript%E5%AD%A6%E4%B9%A0%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>https://zhangangs.github.io/2018/07/15/Javascript学习知识点/</id>
    <published>2018-07-14T16:00:00.000Z</published>
    <updated>2018-12-01T08:31:57.593Z</updated>
    
    <content type="html"><![CDATA[<p>整理一下学习和工作中遇到的javascript中需要注意的地方。不用就是忘得快啊，写在这里方便自己以后复习吧，本文将持续更新。（<strong>首次更新于：2017-8-7</strong>）</p><p><strong> 1、小数点减法问题</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">0.3</span> - <span class="number">0.2</span>; <span class="comment">//结果是多少？</span></span><br></pre></td></tr></table></figure><p>这里的结果是：0.09999999999999998， 不是0.1，是不是很惊讶！</p><p><strong> 更神奇的还在后面！ </strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//循环显示10条相减的信息</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">11</span>; i++)&#123;</span><br><span class="line">  <span class="keyword">var</span> j = i + <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">console</span>.log((j / <span class="number">10</span>) + <span class="string">"-"</span> + (i / <span class="number">10</span>) + <span class="string">"="</span> + (( j / <span class="number">10</span>) - (i / <span class="number">10</span>)), i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果如下：<br><img src="http://oxi2boc62.bkt.clouddn.com/8-7-1.jpg" alt=""></p><p>除了<code>0.2-0.1</code>算对了，其他的都不对，不是大点就是小点。</p><p>这是由于二进制浮点数不能精确的表示简单的浮点数， 例如：0.1，只能表示一个及其近似的值。</p><p><strong>决解方法也很简单,转换成整数计算即可避免这个问题。</strong></p><p><strong>2、关于”任何数字除以0会返回NaN”</strong></p><p>这是《Javascript高级程序设计》中的话，似乎有点错误。这可能跟ECMAScript解释器有关。</p><p>只有0除以0才会返回NaN。其他数字除以0会返回Infinity（无穷大）。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span>/<span class="number">0</span>);  <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>/<span class="number">0</span>);  <span class="comment">//Infinity</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">-2</span>/<span class="number">0</span>); <span class="comment">//-Infinity</span></span><br></pre></td></tr></table></figure></p><p><strong>3、数组最大能有多少个值？</strong></p><p>数组最多可以包含<code>4 294 967 295</code> 个项。</p><p>不要问我为什么，某一天心血来潮，突然想起这个事情，就在网上找到了，博主没验证过这个数字(^_^)</p><p><strong>4、递归阶乘函数（严格模式可用）</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> factorial = (<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(num &lt;=<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num * f(num<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><strong>5、关于setTimeout和setInterval返回值</strong></p><p>他们的调用会返回一个数字ID，这个ID是计划执行函数唯一标识，可以用它来取消函数调用。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello world'</span>);</span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(timer); <span class="comment">//数值1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可用于清除定时器</span></span><br><span class="line">clearTimerout(timer);</span><br></pre></td></tr></table></figure></p><p><strong>6、获取URL中的传递的参数</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">locationSerch</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> local = <span class="built_in">window</span>.location.search;</span><br><span class="line">  <span class="comment">//检测url</span></span><br><span class="line">  <span class="keyword">if</span> (!local) &#123;<span class="built_in">console</span>.error(<span class="string">"没有参数"</span>); <span class="keyword">return</span> obj;&#125;</span><br><span class="line">  <span class="comment">//去掉？和切割成数组</span></span><br><span class="line">  <span class="keyword">var</span> arr = local.substr(<span class="number">1</span>).split(<span class="string">"&amp;"</span>);</span><br><span class="line">  <span class="comment">//数组循环储存到obj</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i =<span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> sp = arr[i].split(<span class="string">"="</span>);</span><br><span class="line">    obj[sp[<span class="number">0</span>]] = sp[<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//返回对象</span></span><br><span class="line">  <span class="keyword">return</span> obj[name];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(locationSerch(<span class="string">"name"</span>))   <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></p><p><strong>7、关于typeof 检测 NaN</strong></p><p>众所周知，<code>NaN</code>代表的意思是<strong>不是一个数字</strong>,那么用typeof检测<code>NaN</code>会返回什么类型呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span>(<span class="literal">NaN</span>);    <span class="comment">//number</span></span><br></pre></td></tr></table></figure><p>返回的是<code>number</code>类型，这就有点尴尬了，但是也能理解，基础类型就哪几种，<code>number</code>如果不合适，其他类型更不合适。</p><p><strong>8、千分位分割</strong></p><p>看到最多的是正则表达式操作。用原生的<code>toLocaleString()</code>也可实现相应功能。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">1234567890</span>;</span><br><span class="line">num.toLocaleString();  <span class="comment">//1,234,567,890</span></span><br></pre></td></tr></table></figure><p><strong>9、为什么获取数组的最后一个元素需要减1？</strong></p><p>因为数组的长度是从1开始计算（符合人类使用标准），而计算机是从0开始，</p><p>即：我们说的第一位，计算机表示的是0，所以取第一个元素为arr[0]，最后一个则为数组的长度减去1位则为arr.length-1。</p><p>没毛病，老铁~</p><p><strong>10、split()、slice()和splice()有什么区别</strong></p><ul><li><p><strong>split：</strong>用于字符串切割，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'1234'</span>;</span><br><span class="line"> str.split(<span class="string">''</span>); <span class="comment">//[1,2,3,4]</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> str = <span class="string">'1,25'</span>;</span><br><span class="line"> str.split(<span class="string">',); //[1,25]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>slice(start,end)</strong>:用于数组截取,不影响原数组。包含<code>start</code>，但不包含<code>end</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'red'</span>,<span class="string">'green'</span>,<span class="string">'blue'</span>];</span><br><span class="line">arr.slice(<span class="number">1</span>); <span class="comment">//['green','blue'];</span></span><br><span class="line">arr.slice(<span class="number">0</span>,<span class="number">2</span>); <span class="comment">//['red','green'];</span></span><br></pre></td></tr></table></figure></li><li><p><strong>splice</strong>:数组方法，可用于数组的删除、插入、替换等一系列操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'red'</span>,<span class="string">'green'</span>,<span class="string">'blue'</span>];</span><br><span class="line"><span class="comment">//删除'red'</span></span><br><span class="line">arr.splice(<span class="number">0</span>,<span class="number">1</span>); <span class="comment">//['red']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除'red'，再删除的位置插入任意数量的项目。</span></span><br><span class="line">arr.splice(<span class="number">0</span>,<span class="number">1</span>,<span class="string">'black'</span>,<span class="string">'yellow'</span>); <span class="comment">//["black", "yellow", "green", "blue"]</span></span><br><span class="line">arr.splice(<span class="number">0</span>,<span class="number">1</span>,[<span class="string">'black'</span>,<span class="string">'yellow'</span>]); <span class="comment">//[["black", "yellow"] "green", "blue"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//把'red'替换成'black'</span></span><br><span class="line">arr.splice(<span class="number">0</span>,<span class="number">1</span>,<span class="string">'black'</span>); <span class="comment">//["black", "green", "blue"]</span></span><br></pre></td></tr></table></figure></li></ul><p><strong> 文章中有考虑不全的地方，欢迎各位指正。 </strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;整理一下学习和工作中遇到的javascript中需要注意的地方。不用就是忘得快啊，写在这里方便自己以后复习吧，本文将持续更新。（&lt;strong&gt;首次更新于：2017-8-7&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 1、小数点减法问题&lt;/strong&gt;&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://zhangangs.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>解决npm警告：WARN registry Unexpected warning for httpsregistry.npmjs.org Miscellaneous Warning EINTEGRITY</title>
    <link href="https://zhangangs.github.io/2018/07/10/%E8%A7%A3%E5%86%B3npm%E8%AD%A6%E5%91%8A%EF%BC%9AWARN%20registry%20Unexpected%20warning%20for%20httpsregistry.npmjs.org%20Miscellaneous%20Warning%20EINTEGRITY/"/>
    <id>https://zhangangs.github.io/2018/07/10/解决npm警告：WARN registry Unexpected warning for httpsregistry.npmjs.org Miscellaneous Warning EINTEGRITY/</id>
    <published>2018-07-09T16:00:00.000Z</published>
    <updated>2018-12-01T08:31:57.605Z</updated>
    
    <content type="html"><![CDATA[<p>在安装npm插件的时候，又遇到一个坑。</p><p><code>WARN registry Unexpected warning for httpsregistry.npmjs.org Miscellaneous Warning EINTEGRITY</code></p><p>下面还有很多的错误信息….</p><p><strong>解决方法如下:</strong></p><p>1、删除已有的<code>node-modules</code>文件夹</p><p>2、删除项目下面的<code>package-lock.json</code>文件</p><p>3、重新运行<code>npm install</code></p><p><strong>备注：</strong> <em>cnpm安装的插件用不了，只能npm安装才能用，真的是不知道说啥好。</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在安装npm插件的时候，又遇到一个坑。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;WARN registry Unexpected warning for httpsregistry.npmjs.org Miscellaneous Warning EINTEGRITY&lt;/code&gt;&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="node" scheme="https://zhangangs.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>解决Error ENOENT no such file or directory, scandir 安装node-sass报错</title>
    <link href="https://zhangangs.github.io/2018/07/04/%E8%A7%A3%E5%86%B3Error%20ENOENT%20no%20such%20file%20or%20directory,%20scandir%20%E5%AE%89%E8%A3%85node-sass%E6%8A%A5%E9%94%99/"/>
    <id>https://zhangangs.github.io/2018/07/04/解决Error ENOENT no such file or directory, scandir 安装node-sass报错/</id>
    <published>2018-07-03T16:00:00.000Z</published>
    <updated>2018-12-01T08:31:57.604Z</updated>
    
    <content type="html"><![CDATA[<p>在构建项目中，又遇到一个坑，提示如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[16:05:46] Error: ENOENT: no such file or directory, scandir &apos;D:\server\gateway-client2\node_modules\_node-sass@3.13.1@node-sass\vendor&apos;</span><br><span class="line">    at Error (native)</span><br><span class="line">    at Object.fs.readdirSync (fs.js:951:18)</span><br><span class="line">    at Object.getInstalledBinaries (D:\server\gateway-client2\node_modules\_node-sass@3.13.1@node-sass\lib\extensions.js:121:13)</span><br><span class="line">    at foundBinariesList (D:\server\gateway-client2\node_modules\_node-sass@3.13.1@node-sass\lib\errors.js:20:15)</span><br><span class="line">    at foundBinaries (D:\server\gateway-client2\node_modules\_node-sass@3.13.1@node-sass\lib\errors.js:15:5)</span><br><span class="line">    at Object.module.exports.missingBinary (D:\server\gateway-client2\node_modules\_node-sass@3.13.1@node-sass\lib\errors.js:45:5)</span><br><span class="line">    at module.exports (D:\server\gateway-client2\node_modules\_node-sass@3.13.1@node-sass\lib\binding.js:15:30)</span><br><span class="line">    at Object.&lt;anonymous&gt; (D:\server\gateway-client2\node_modules\_node-sass@3.13.1@node-sass\lib\index.js:14:35)</span><br><span class="line">    at Module._compile (module.js:570:32)</span><br><span class="line">    at Object.Module._extensions..js (module.js:579:10)</span><br></pre></td></tr></table></figure></p><p>解决方法如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm rebuild node-sass</span><br></pre></td></tr></table></figure></p><p>重新编译一下就可以了。</p><p>不要问我为什么，我也不知道，如果你知道是什么问题导致这个问题，请给我留言吧(^_^)。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在构建项目中，又遇到一个坑，提示如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;lin
      
    
    </summary>
    
    
      <category term="node" scheme="https://zhangangs.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>使用nodejs让项目模块自动生成</title>
    <link href="https://zhangangs.github.io/2018/07/02/%E4%BD%BF%E7%94%A8nodejs%E8%AE%A9%E9%A1%B9%E7%9B%AE%E6%A8%A1%E5%9D%97%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90/"/>
    <id>https://zhangangs.github.io/2018/07/02/使用nodejs让项目模块自动生成/</id>
    <published>2018-07-01T16:00:00.000Z</published>
    <updated>2018-12-01T08:31:57.598Z</updated>
    
    <content type="html"><![CDATA[<p>项目每个模块都有一些相同的内容，比如：<code>index</code> <code>controller</code> 等等，以前的操作方式是每次开一个新模块把原来的模块复制一份，在改改名称，就可以使用了。</p><p>但是这有点花时间，<strong> 重复的工作可以交给程序去做，我们只负责创造就可以了 </strong>, 所以我开发了个npm包来做这个事情。</p><p>我的初衷是写一个脚手架，但是项目可能不会移植（只是我们部门使用，以后有需求在开发），所以就只开发了新建模块功能。</p><p><strong> 首先，初始化项目，我取名叫<code>bird-cli</code>,名字比较小众化。 </strong> </p><p>在github上面新建仓库<code>bird-cli</code>,在本地化初始化，就可以开发了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><p><strong> 实现的原理其实很简单，就是有一份模版文件，调用相应的命令就拷贝一份，再更改文件相应的信息即可。</strong> 围绕这个主题思想，实现我们需要的功能。</p><p>实现之前还需要命令行交互，获取用户的输入，需要用户输入新建模块的名称、开发人员、模块描述、模块新建时间等信息，我选择了<code>inquirer</code>插件来做这个事情。</p><p>在目录下新建<code>bin</code>文件夹，在<code>bin</code>文件夹新建<code>index.js</code>,这是我们项目入口文件。</p><p>index.js代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#! /usr/bin/env node</span><br><span class="line"></span><br><span class="line">console.log(1);</span><br></pre></td></tr></table></figure></p><p>在命令行执行 <code>node bin/index.js</code>,可以看到打印出相应的数字。</p><p>但是，我们不是需要这种效果，我们希望直接执行<code>bird</code>,就可运行程序。</p><p>其实可以通过改造<code>package.json</code>来实现这个功能。在<code>package.json</code>中添加<code>bin</code>字段，如下所示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;bin&quot;: &#123;</span><br><span class="line">    &quot;bird&quot;: &quot;./bin/index.js&quot;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>命令行输入<code>bird</code>，即可执行<code>index.js</code>文件。</p><p><strong> 下一步，收集用户输入信息，安装<code>inquirer</code>插件  </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install inquirer --save</span><br></pre></td></tr></table></figure><p>在<code>index.js</code>中引用<code>inquirer</code>插件,收集相应的信息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /usr/bin/env node</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> inquirer = <span class="built_in">require</span>(<span class="string">'inquirer'</span>);</span><br><span class="line"><span class="keyword">const</span> questions = [</span><br><span class="line">    &#123;</span><br><span class="line">        type: <span class="string">"input"</span>,</span><br><span class="line">        name: <span class="string">"name"</span>,</span><br><span class="line">        message: <span class="string">"模块名称"</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="string">'例如：login'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        type: <span class="string">"input"</span>,</span><br><span class="line">        name: <span class="string">"description"</span>,</span><br><span class="line">        message: <span class="string">"模块描述"</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="string">"例如：登录模块"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        type: <span class="string">"input"</span>,</span><br><span class="line">        name: <span class="string">"author"</span>,</span><br><span class="line">        message: <span class="string">"开发者姓名"</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="string">"例如：Veiss"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        type: <span class="string">'confirm'</span>,</span><br><span class="line">        message: <span class="string">'你是否确定。'</span>,</span><br><span class="line">        name: <span class="string">'cm'</span></span><br><span class="line">    &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">inquirer.prompt(questions).then(<span class="function"><span class="keyword">function</span> (<span class="params">answers</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//打印出用户输入的信息</span></span><br><span class="line">    <span class="built_in">console</span>.log(answers);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样已经可以收集到用户的信息了，但是我需要<code>bird init</code>才触发新建模块，因为以后可能会扩充 <code>bird remove</code>、 <code>bird add</code>等命令,处理不同的需求，我们需要把他们区分开来。</p><p><strong> 这里句需要大名鼎鼎的<code>commander</code>插件，(我似乎不太会用这个插件^_^)。</strong></p><p>安装<code>npm install commander --save</code>,</p><p>在<code>index.js</code>中引用插件，index.js改造如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /usr/bin/env node</span></span><br><span class="line"><span class="keyword">let</span> program = <span class="built_in">require</span>(<span class="string">'commander'</span>);</span><br><span class="line"><span class="keyword">let</span> inquirer = <span class="built_in">require</span>(<span class="string">'inquirer'</span>);</span><br><span class="line"><span class="keyword">const</span> questions = [</span><br><span class="line">    &#123;</span><br><span class="line">        type: <span class="string">"input"</span>,</span><br><span class="line">        name: <span class="string">"name"</span>,</span><br><span class="line">        message: <span class="string">"模块名称"</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="string">'例如：login'</span>,</span><br><span class="line">        format: <span class="function"><span class="keyword">function</span> (<span class="params">input, answers</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(input, answers);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        type: <span class="string">"input"</span>,</span><br><span class="line">        name: <span class="string">"description"</span>,</span><br><span class="line">        message: <span class="string">"模块描述"</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="string">"例如：登录模块"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        type: <span class="string">"input"</span>,</span><br><span class="line">        name: <span class="string">"author"</span>,</span><br><span class="line">        message: <span class="string">"开发者姓名"</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="string">"例如：Veiss"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        type: <span class="string">'confirm'</span>,</span><br><span class="line">        message: <span class="string">'你是否确定。'</span>,</span><br><span class="line">        name: <span class="string">'cm'</span></span><br><span class="line">    &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">program</span><br><span class="line">    .version(<span class="built_in">require</span>(<span class="string">'../package.json'</span>).version)</span><br><span class="line">    .option(<span class="string">'-init, --init'</span>, <span class="string">'Init Modele'</span>)</span><br><span class="line">    .usage(<span class="string">'[options] [init]'</span>)</span><br><span class="line">    .parse(process.argv);</span><br><span class="line"></span><br><span class="line">program.parse(process.argv);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pname = program.args[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span> (!pname) &#123;</span><br><span class="line">    program.help();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (pname != <span class="string">"init"</span>) &#123;</span><br><span class="line">    program.help();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    inquirer.prompt(questions).then(<span class="function"><span class="keyword">function</span> (<span class="params">answers</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(answers);</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在命令行输入，<code>bird init</code>,就会按照正常程序走，而输入其他则会显示<code>--help</code>信息。</p><p>做到这里程序已经开发一半了，下面就是拷贝模版文件和替换相应的关键字信息即可完成，在此之前我们还需要收集到用户的操作时间，这个不能让用户输入，只好通过程序去收集，默认就是现在的时间。</p><p><strong> 新建<code>lib</code>目录，这是放程序的模块文件，<code>lib</code>目录下新建<code>date.js</code>,代码如下所示： </strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 时间格式化</span></span><br><span class="line"><span class="comment"> * 格式如下：2016/12/12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fmtDate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> y = <span class="number">1900</span> + date.getYear();</span><br><span class="line">    <span class="keyword">var</span> m = <span class="string">"0"</span> + (date.getMonth() + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> d = <span class="string">"0"</span> + date.getDate();</span><br><span class="line">    <span class="keyword">return</span> y + <span class="string">"/"</span> + m.substring(m.length - <span class="number">2</span>, m.length) + <span class="string">"/"</span> + d.substring(d.length - <span class="number">2</span>, d.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = fmtDate;</span><br></pre></td></tr></table></figure><p>在<code>index.js</code>中引入<code>date</code>模块,改造如下所示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> date = <span class="built_in">require</span>(<span class="string">'../lib/date'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里需要改造一下</span></span><br><span class="line">inquirer.prompt(questions).then(<span class="function"><span class="keyword">function</span> (<span class="params">answers</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//把当前时间传给answers的date字段。我们需要在后续操作中使用这些字段。</span></span><br><span class="line">    answers.date = date();</span><br><span class="line">    <span class="built_in">console</span>.log(answers);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong> 需要用户输入的所有信息我们都拿到了，下一步就是拷贝模版。</strong></p><p>再次之前我们需要安装<code>bluebird</code>和<code>fs-extra</code>插件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install bluebird fs-extra --save</span><br></pre></td></tr></table></figure><p>在<code>lib</code>目录下新建<code>generateStructure.js</code>文件，文件内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="built_in">require</span>(<span class="string">"bluebird"</span>),</span><br><span class="line">    fsFile = promise.promisifyAll(<span class="built_in">require</span>(<span class="string">'fs-extra'</span>)),</span><br><span class="line">    fs = <span class="built_in">require</span>(<span class="string">'fs'</span>),</span><br><span class="line">    root = __dirname.replace(<span class="regexp">/lib/</span>, <span class="string">''</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateStructure</span>(<span class="params">info</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> project = info.name,</span><br><span class="line">        author = info.author,</span><br><span class="line">        description = info.description,</span><br><span class="line">        date = info.date;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fsFile.copyAsync(root + <span class="string">'/template'</span>, project, &#123; <span class="attr">clobber</span>: <span class="literal">true</span> &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取文件</span></span><br><span class="line">        fs.readdir(project, <span class="function"><span class="keyword">function</span> (<span class="params">err, files</span>) </span>&#123;</span><br><span class="line">            files.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">filename</span>) </span>&#123;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">var</span> oldPath = project + <span class="string">'/'</span> + filename;</span><br><span class="line">                <span class="keyword">var</span> newPath = project + <span class="string">'/'</span> + filename.replace(<span class="regexp">/template/g</span>, project);</span><br><span class="line"></span><br><span class="line">                fs.rename(oldPath, newPath, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">console</span>.log(filename + <span class="string">'新建成功!'</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//读取文件，修改里面的关键字</span></span><br><span class="line">                    fs.readFile(newPath, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">var</span> result = data.toString()</span><br><span class="line">                            .replace(<span class="regexp">/template/g</span>, project)</span><br><span class="line">                            .replace(<span class="regexp">/\&#123;moduleName\&#125;/g</span>, description)</span><br><span class="line">                            .replace(<span class="regexp">/\&#123;author\&#125;/g</span>, author)</span><br><span class="line">                            .replace(<span class="regexp">/\&#123;date\&#125;/g</span>, date);</span><br><span class="line"></span><br><span class="line">                        fs.writeFile(newPath, result, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">                            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = generateStructure;</span><br></pre></td></tr></table></figure><p><strong> 我们需要把<code>generateStructure.js</code>引入到<code>index.js</code>中。 <code>index.js</code>改造如下：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入代码</span></span><br><span class="line"><span class="keyword">let</span> gs = <span class="built_in">require</span>(<span class="string">'../lib/generateStructure'</span>);</span><br><span class="line">inquirer.prompt(questions).then(<span class="function"><span class="keyword">function</span> (<span class="params">answers</span>) </span>&#123;</span><br><span class="line">    answers.date = date();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'正在拷贝文件，请稍等...'</span>);</span><br><span class="line">    <span class="comment">//执行方法</span></span><br><span class="line">    gs(answers);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong> 最终<code>index.js</code>代码如下：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /usr/bin/env node</span></span><br><span class="line"><span class="keyword">let</span> program = <span class="built_in">require</span>(<span class="string">'commander'</span>),</span><br><span class="line">    gs = <span class="built_in">require</span>(<span class="string">'../lib/generateStructure'</span>),</span><br><span class="line">    date = <span class="built_in">require</span>(<span class="string">'../lib/date'</span>),</span><br><span class="line">    inquirer = <span class="built_in">require</span>(<span class="string">'inquirer'</span>);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">const</span> questions = [</span><br><span class="line">    &#123;</span><br><span class="line">        type: <span class="string">"input"</span>,</span><br><span class="line">        name: <span class="string">"name"</span>,</span><br><span class="line">        message: <span class="string">"模块名称"</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="string">'例如：login'</span>,</span><br><span class="line">        format: <span class="function"><span class="keyword">function</span> (<span class="params">input, answers</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(input, answers);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        type: <span class="string">"input"</span>,</span><br><span class="line">        name: <span class="string">"description"</span>,</span><br><span class="line">        message: <span class="string">"模块描述"</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="string">"例如：登录模块"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        type: <span class="string">"input"</span>,</span><br><span class="line">        name: <span class="string">"author"</span>,</span><br><span class="line">        message: <span class="string">"开发者姓名"</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="string">"例如：Veiss"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        type: <span class="string">'confirm'</span>,</span><br><span class="line">        message: <span class="string">'你是否确定。'</span>,</span><br><span class="line">        name: <span class="string">'cm'</span></span><br><span class="line">    &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">program</span><br><span class="line">    .version(<span class="built_in">require</span>(<span class="string">'../package.json'</span>).version)</span><br><span class="line">    .option(<span class="string">'-init, --init'</span>, <span class="string">'Init Modele'</span>)</span><br><span class="line">    .usage(<span class="string">'[options] [init]'</span>)</span><br><span class="line">    .parse(process.argv);</span><br><span class="line"></span><br><span class="line">program.parse(process.argv);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pname = program.args[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span> (!pname) &#123;</span><br><span class="line">    program.help();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (pname != <span class="string">"init"</span>) &#123;</span><br><span class="line">    program.help();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    inquirer.prompt(questions).then(<span class="function"><span class="keyword">function</span> (<span class="params">answers</span>) </span>&#123;</span><br><span class="line">        answers.date = date();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'正在拷贝文件，请稍等...'</span>)</span><br><span class="line">        gs(answers);</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>做到这里，代码开发工作就已经完成了。</p><p><strong> 最后一步，就是写<code>README.md</code>文件发布包。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//登录npm,如果没有账号需要注册一个</span></span><br><span class="line">npm login</span><br><span class="line"></span><br><span class="line"><span class="comment">//发布包</span></span><br><span class="line">npm publish</span><br></pre></td></tr></table></figure><p>代码提交到github仓库！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &apos;提交描述&apos;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure></p><p>通过<code>npm install bird-cli -g</code>安装即可使用，大功告成！(^_^)。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;项目每个模块都有一些相同的内容，比如：&lt;code&gt;index&lt;/code&gt; &lt;code&gt;controller&lt;/code&gt; 等等，以前的操作方式是每次开一个新模块把原来的模块复制一份，在改改名称，就可以使用了。&lt;/p&gt;
&lt;p&gt;但是这有点花时间，&lt;strong&gt; 重复的工作可
      
    
    </summary>
    
    
      <category term="node" scheme="https://zhangangs.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>angularjs如何取消双向绑定</title>
    <link href="https://zhangangs.github.io/2018/06/27/angularjs%E5%A6%82%E4%BD%95%E5%8F%96%E6%B6%88%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/"/>
    <id>https://zhangangs.github.io/2018/06/27/angularjs如何取消双向绑定/</id>
    <published>2018-06-26T16:00:00.000Z</published>
    <updated>2018-12-01T08:31:57.594Z</updated>
    
    <content type="html"><![CDATA[<p>在做项目的时候遇到这个问题，当时的场景是需要用户点击完成按钮后数据才更新，但是angularjs是双向绑定，你这边刚改，数据就跟着更新了，这就有点尴尬了。</p><p><strong> 那么，怎样取消数据双向绑定呢？ </strong></p><p>在网上找到一个解决方案，使用angularjs<code>copy</code>方法，可以解决这个问题。</p><p><strong> 使用方法如下 </strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$scope.str = <span class="string">''</span>;</span><br><span class="line">$scope.strTemp = <span class="string">'我的文本'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//触发事件</span></span><br><span class="line">$scope.clickEvent = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $scope.str = angular.copy($scope.strTemp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascritp:;"</span> <span class="attr">ng-click</span>=<span class="string">"clickEvent()"</span>&gt;</span>保存<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>完成！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在做项目的时候遇到这个问题，当时的场景是需要用户点击完成按钮后数据才更新，但是angularjs是双向绑定，你这边刚改，数据就跟着更新了，这就有点尴尬了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 那么，怎样取消数据双向绑定呢？ &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在网上找到一个解决方
      
    
    </summary>
    
    
      <category term="angularjs" scheme="https://zhangangs.github.io/tags/angularjs/"/>
    
  </entry>
  
  <entry>
    <title>z先生，快来学学别人是怎么夸媳妇的</title>
    <link href="https://zhangangs.github.io/2018/06/23/z%E5%85%88%E7%94%9F%EF%BC%8C%E5%BF%AB%E6%9D%A5%E5%AD%A6%E5%AD%A6%E5%88%AB%E4%BA%BA%E6%98%AF%E6%80%8E%E4%B9%88%E5%A4%B8%E5%AA%B3%E5%A6%87%E7%9A%84/"/>
    <id>https://zhangangs.github.io/2018/06/23/z先生，快来学学别人是怎么夸媳妇的/</id>
    <published>2018-06-22T16:00:00.000Z</published>
    <updated>2018-12-01T08:53:42.492Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=201177&auto=1&height=66"></iframe><p><strong> 歌词如下 </strong></p><p>我家娘子白素贞，千娇百媚俏佳人。</p><p>慈眉善目心肠好，年年南海拜观音。</p><p>断桥之上初相会，游湖借伞动真情。</p><p>三生石上有盟证，双茶巷内结下亲。</p><p>恩恩又爱爱，我我又卿卿 我呀我呀又卿卿。</p><p>助我成事业，赠我雪花银 赠呀我呀雪花银。</p><p><strong>点评</strong>：<em>呸，不要脸，炫妻狂魔。。<img src="https://tb2.bdstatic.com/tb/editor/images/tsj/t_0029.gif" alt=""></em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=
      
    
    </summary>
    
    
      <category term="媳妇" scheme="https://zhangangs.github.io/tags/%E5%AA%B3%E5%A6%87/"/>
    
  </entry>
  
  <entry>
    <title>宋词分享：《点绛唇·蹴罢秋千》</title>
    <link href="https://zhangangs.github.io/2018/06/23/%E5%AE%8B%E8%AF%8D%E5%88%86%E4%BA%AB%EF%BC%9A%E7%82%B9%E7%BB%9B%E5%94%87%C2%B7%E8%B9%B4%E7%BD%A2%E7%A7%8B%E5%8D%83/"/>
    <id>https://zhangangs.github.io/2018/06/23/宋词分享：点绛唇·蹴罢秋千/</id>
    <published>2018-06-22T16:00:00.000Z</published>
    <updated>2018-12-01T08:31:57.601Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oxi2boc62.bkt.clouddn.com/6-23-02.jpg" alt=""></p><blockquote><p>这首词写出了少女羞涩、俏皮可爱、天真浪漫的神态。真是好优美的诗词，好可爱的姑娘。<img src="https://tb2.bdstatic.com/tb/editor/images/tsj/t_0035.gif" alt=""></p></blockquote><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=516872617&auto=1&height=66"></iframe><p><strong> 原文如下 </strong></p><p>作者:李清照<br>蹴罢秋千，起来慵整纤纤手。露浓花瘦，薄汗轻衣透。<br>见客入来，袜刬(chan)金钗溜。和羞走，倚门回首，却把青梅嗅。</p><p><strong> 译文 </strong></p><p>荡罢秋千起身，懒得揉搓细嫩的手。在她身旁，瘦瘦的花枝上挂着晶莹的露珠，她身上的涔涔香汗渗透着薄薄的罗衣。<br>突然进来一位客人，她慌得顾不上穿鞋，只穿着袜子抽身就走，连头上的金钗也滑落下来。她含羞跑开，倚靠门回头看，又闻了一阵青梅的花香。</p><p><strong> 个人赏析 </strong></p><p>上半句描绘出一个天真烂漫而又情窦初开的少女生活写照(在家玩千秋)。<br>下半句写出了少女看到有客人来的仓促间手足无措，鞋子都忘记穿了，以致金钗也脱落了。但是又想偷偷的看一眼（客人），只好借“嗅青梅”这一细节掩饰一下，偷偷地看一眼。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://oxi2boc62.bkt.clouddn.com/6-23-02.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这首词写出了少女羞涩、俏皮可爱、天真浪漫的神态。真是好优美的诗词，好可爱的姑娘。&lt;img src=&quot;htt
      
    
    </summary>
    
    
      <category term="蹴罢秋千" scheme="https://zhangangs.github.io/tags/%E8%B9%B4%E7%BD%A2%E7%A7%8B%E5%8D%83/"/>
    
  </entry>
  
  <entry>
    <title>关于解决前端首页加载慢的问题</title>
    <link href="https://zhangangs.github.io/2018/06/19/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3%E5%89%8D%E7%AB%AF%E9%A6%96%E9%A1%B5%E5%8A%A0%E8%BD%BD%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://zhangangs.github.io/2018/06/19/关于解决前端首页加载慢的问题/</id>
    <published>2018-06-18T16:00:00.000Z</published>
    <updated>2018-12-01T08:31:57.600Z</updated>
    
    <content type="html"><![CDATA[<p>目前网站的全部js和css通过gulp打包成一个大文件，angularjs又不支持异步加载模块代码。</p><p>就出现了这么一种情况，就是打开首页的时候要把全部的js和css资源请求到，首页加载的非常的慢，半天都显示不出来。这个问题对网站来说就非常的致命了。</p><p>以前我做个代码的压缩，但是治标不治本，以后模块越多，打包的文件越来越大，所以我抽空就写了这么个解决方案(按需加载)。</p><p><strong> 需要解决什么问题？ </strong></p><p>答：解决网站首页加载慢的问题。</p><p><strong> 是什么原因导致首页加载慢？ </strong></p><p>答：全站的资源都打包在一起，加载首页的时候，全站的资源都加载了，所以导致首页加载慢。</p><table><thead><tr><th>文件名</th><th>大小</th><th>加载时间</th><th>备注</th></tr></thead><tbody><tr><td>vendor.css</td><td>845kb</td><td>157ms</td><td>插件css</td></tr><tr><td>vendor.js</td><td>5.3mb</td><td>1.14s</td><td>插件js</td></tr><tr><td>main.css</td><td>662kb</td><td>217ms</td><td>业务css</td></tr><tr><td>app.js</td><td>5.4mb</td><td>1.24s</td><td>业务js</td></tr></tbody></table><p>以上的代码，做过一定的压缩。（并未完全压缩，因为代码不规范，压缩不了）</p><p>如果还是以这种方式加载资源，打包的代码会越来越庞大。现在大概需要4到5s的加载时间，以后<code>10s</code>才加载出来都是有可能的。</p><p><strong> 如何解决这个问题？ </strong></p><p>答：网站资源和第三方插件js和css文件不要打包成一个文件，按需加载（哪里需要就在哪里加载） 即可解决这个问题。</p><p><strong> 那么，具体该如何操作呢？ </strong></p><p>准备工作：安装<code>$oclazyload</code> 插件， </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bower install oclazyload --save</span><br></pre></td></tr></table></figure><p><strong> 为什么要使用这个插件？ </strong></p><p>答：这是angularjs资源按需加载插件，专门解决按需加载文件需求。</p><p>文档手册：<a href="https://oclazyload.readme.io/" target="_blank" rel="noopener">https://oclazyload.readme.io/</a></p><p><strong> 使用方法：</strong></p><p>1、添加<code>$oclazyload</code>模块到项目中<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">"MyApp"</span>, [<span class="string">"oc.lazyLoad"</span>]);</span><br></pre></td></tr></table></figure></p><p>2、在app.module.js中配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.config([<span class="string">'$ocLazyLoadProvider'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$ocLazyLoadProvider</span>) </span>&#123;</span><br><span class="line">    $ocLazyLoadProvider.config(&#123;</span><br><span class="line">      debug: <span class="literal">true</span>, <span class="comment">//调试模式</span></span><br><span class="line">      events: <span class="literal">true</span>，<span class="comment">//广播事件</span></span><br><span class="line">     &#125;);</span><br><span class="line"> &#125;])</span><br></pre></td></tr></table></figure><p>3、在router中使用，我以naturePlus模块举例。naturePlus.status.js配置如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新建</span></span><br><span class="line">.state(<span class="string">'naturePlusAdd'</span>, &#123;</span><br><span class="line">  url: <span class="string">'/naturePlus/add'</span>,</span><br><span class="line">  templateUrl: <span class="string">'app/naturePlus/add/index.html'</span>,</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * 下面是路由的依赖资源，</span></span><br><span class="line"><span class="comment">   * 可以看出来：页面依赖第三方插件bootstrap-tagsinput和一些公共的代码</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  resolve: &#123;</span><br><span class="line">    deps: [<span class="string">'$ocLazyLoad'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$ocLazyLoad</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> $ocLazyLoad.load([</span><br><span class="line">        <span class="comment">//模块代码</span></span><br><span class="line">        <span class="string">'app/naturePlus/naturePlus.service.js'</span>,</span><br><span class="line">        <span class="string">'app/naturePlus/naturePlus.factory.js'</span>,</span><br><span class="line">        <span class="string">'app/naturePlus/naturePlus.directive.js'</span>,</span><br><span class="line">        <span class="string">'app/naturePlus/naturePlus.filter.js'</span>,</span><br><span class="line">        <span class="string">'app/naturePlus/add/add.controller.js'</span>,</span><br><span class="line">        <span class="comment">//插件代码</span></span><br><span class="line">        <span class="string">'bower_components/bootstrap-tagsinput/dist/bootstrap-tagsinput.css'</span>,</span><br><span class="line">        <span class="string">'bower_components/bootstrap-tagsinput/dist/bootstrap-tagsinput.js'</span></span><br><span class="line">      ]);</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.state(<span class="string">'...'</span>)</span><br></pre></td></tr></table></figure><p>以上就完成了代码的改造，这样访问页面才会加载这个页面需要的资源，尽情的撸代码吧!</p><p>桥豆麻袋，桥豆麻袋。。。</p><p>开发的时候这样改造，但是打包的时候还是打包成一个文件，这不是没改吗？</p><p>是的，我们下一步，就是对gulp打包流程的改造。</p><p><strong> 那么，gulp打包流程该如何改造呢？ </strong></p><p>1、第三方插件</p><p>查找项目下引用的是bower_components中的js和css文件。即：路由<code>ocLazyLoad.load()</code>按需加载的 <code>bower_components</code> 插件，拷贝到dist目录下<code>bower_component</code>文件夹下面。</p><p>2、关于预编译文件</p><p>如果是scss编译成css，其他模版文件编译成浏览器可识别的文件，压缩后，放到dist相应的文件夹下面即可。</p><p>3、imgae、js和html</p><p>文件压缩，拷贝文件到dist相应的目录即可。</p><p>到此，开发和打包改造完成！</p><p><strong> 总结：</strong>虽然按需加载会损耗一部分性能（打开新页面再去请求资源），但是能解决目前首页加载慢的问题和打包越来越大的问题。</p><p>这种方式改动极小，只需要改造页面的路由手动添加依赖，能解决问题相应的问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;目前网站的全部js和css通过gulp打包成一个大文件，angularjs又不支持异步加载模块代码。&lt;/p&gt;
&lt;p&gt;就出现了这么一种情况，就是打开首页的时候要把全部的js和css资源请求到，首页加载的非常的慢，半天都显示不出来。这个问题对网站来说就非常的致命了。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="angular" scheme="https://zhangangs.github.io/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>关于bootstrap-tagsinput中模糊查询功能</title>
    <link href="https://zhangangs.github.io/2018/06/08/%E5%85%B3%E4%BA%8Ebootstrap-tagsinput%E4%B8%AD%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2%E5%8A%9F%E8%83%BD/"/>
    <id>https://zhangangs.github.io/2018/06/08/关于bootstrap-tagsinput中模糊查询功能/</id>
    <published>2018-06-07T16:00:00.000Z</published>
    <updated>2018-12-01T08:31:57.599Z</updated>
    
    <content type="html"><![CDATA[<p>在使用bootstrap-tagsinput插件的时候遇到一个问题，模糊查询的时候，只能搜索到以字母开头和以空格隔开的字母，案例如下：</p><p>我以官方提供的源数据为例：<code>[ &quot;Amsterdam&quot;,&quot;Los Angeles&quot;,  &quot;Kinshasa&quot;]</code></p><p>在输入框输入<code>a</code>,能搜索到<code>&quot;Amsterdam&quot;,&quot;Los Angeles&quot;</code> 而搜索不到<code>Kinshasa</code>,这和我的预期不相符，我想要实现的效果是，所有包含字符<code>a</code>的数据都搜索出来。</p><p><strong> 所以做如下改进：  </strong></p><p>思路如下：获取到用户的查询数据，再原数组中搜索用户的筛选内容，返回给用户。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> resoures = [ <span class="string">"Amsterdam"</span>,<span class="string">"Los Angeles"</span>,  <span class="string">"Kinshasa"</span>];</span><br><span class="line"></span><br><span class="line">$(<span class="string">'input'</span>).tagsinput(&#123;</span><br><span class="line">    typeaheadjs: &#123;</span><br><span class="line">        source: <span class="function"><span class="keyword">function</span> (<span class="params">query, sync</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> arr = [];</span><br><span class="line">            <span class="comment">//循环数据</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> resoures) &#123;</span><br><span class="line">                <span class="keyword">if</span> (resoures[i].indexOf(query) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">                    arr.push(resoures[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            sync(arr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>完美解决问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在使用bootstrap-tagsinput插件的时候遇到一个问题，模糊查询的时候，只能搜索到以字母开头和以空格隔开的字母，案例如下：&lt;/p&gt;
&lt;p&gt;我以官方提供的源数据为例：&lt;code&gt;[ &amp;quot;Amsterdam&amp;quot;,&amp;quot;Los Angeles&amp;q
      
    
    </summary>
    
    
      <category term="bootstrap-tagsinput" scheme="https://zhangangs.github.io/tags/bootstrap-tagsinput/"/>
    
  </entry>
  
  <entry>
    <title>关于在angularjs中使用jquery插件</title>
    <link href="https://zhangangs.github.io/2018/06/08/%E5%85%B3%E4%BA%8E%E5%9C%A8angularjs%E4%B8%AD%E4%BD%BF%E7%94%A8jquery%E6%8F%92%E4%BB%B6/"/>
    <id>https://zhangangs.github.io/2018/06/08/关于在angularjs中使用jquery插件/</id>
    <published>2018-06-07T16:00:00.000Z</published>
    <updated>2018-12-01T08:31:57.599Z</updated>
    
    <content type="html"><![CDATA[<p>也是在使用bootstrap-tagsinput插件的时候遇到的问题，网上很多的教程都是给插件写一个<code>directive</code>。</p><p>其实，可以直接使用jquery插件，我用<code>bootstrap-tagsinput</code>插件使用举例。</p><p><strong>首先，在项目中引用插件代码</strong> </p><p>不要忘记引用jquery，bootstrap-tagsinput依赖jquery。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"xxx/bootstrap-tagsinput.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"xxx/bootstrap-tagsinput.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>第二步：在代码中使用</strong> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'app.naturePlus'</span>).controller(<span class="string">'NaturePlusAddCtrl'</span>, NaturePlusAddCtrl);</span><br><span class="line"><span class="comment">//注入依赖</span></span><br><span class="line">NaturePlusAddCtrl.$inject =[<span class="string">'$scope'</span>,<span class="string">'$compile'</span>];</span><br><span class="line"><span class="comment">//Controller</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NaturePlusAddCtrl</span>(<span class="params">$scope,$compile</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = $(<span class="string">'&lt;input type="text" /&gt;'</span>);</span><br><span class="line">    <span class="keyword">var</span> resoures = [ <span class="string">"Amsterdam"</span>,<span class="string">"Los Angeles"</span>,  <span class="string">"Kinshasa"</span>];</span><br><span class="line">    <span class="comment">//调用插件</span></span><br><span class="line">    str.tagsinput(&#123;</span><br><span class="line">        typeaheadjs: &#123;</span><br><span class="line">            source: <span class="function"><span class="keyword">function</span> (<span class="params">query, sync</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> arr = [];</span><br><span class="line">                <span class="comment">//循环数据</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> resoures) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (resoures[i].indexOf(query) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">                        arr.push(resoures[i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                sync(arr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//插入到dom节点中</span></span><br><span class="line">    $(<span class="string">'body'</span>).append($compile(str)($scope));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以工作了，但是取值的话也要使用jquery的方式。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;也是在使用bootstrap-tagsinput插件的时候遇到的问题，网上很多的教程都是给插件写一个&lt;code&gt;directive&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;其实，可以直接使用jquery插件，我用&lt;code&gt;bootstrap-tagsinput&lt;/code&gt;插件使用
      
    
    </summary>
    
    
      <category term="angular" scheme="https://zhangangs.github.io/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>angular上传文件组件 `ng-file-upload` IE11点击没有反应,如何解决？</title>
    <link href="https://zhangangs.github.io/2018/05/13/angular%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E7%BB%84%E4%BB%B6%20%60ng-file-upload%60%20IE11%E7%82%B9%E5%87%BB%E6%B2%A1%E6%9C%89%E5%8F%8D%E5%BA%94/"/>
    <id>https://zhangangs.github.io/2018/05/13/angular上传文件组件 `ng-file-upload` IE11点击没有反应/</id>
    <published>2018-05-12T16:00:00.000Z</published>
    <updated>2018-12-01T08:31:57.594Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>把 默认的<code>button</code>标签改成<code>a</code>标签即可</p></blockquote> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-success btn-upload"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-file"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"ng-scope"</span>&gt;</span> 选择文件<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">nv-file-select</span> <span class="attr">uploader</span>=<span class="string">"uploader"</span> <span class="attr">multiple</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>改成:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"btn btn-success btn-upload"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-file"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"ng-scope"</span>&gt;</span> 选择文件<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">nv-file-select</span> <span class="attr">uploader</span>=<span class="string">"uploader"</span> <span class="attr">multiple</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;把 默认的&lt;code&gt;button&lt;/code&gt;标签改成&lt;code&gt;a&lt;/code&gt;标签即可&lt;/p&gt;
&lt;/blockquote&gt;
 &lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
      
    
    </summary>
    
    
      <category term="angular" scheme="https://zhangangs.github.io/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>ng-table数据排序后储存到后台</title>
    <link href="https://zhangangs.github.io/2018/05/05/ng-table%E6%95%B0%E6%8D%AE%E6%8E%92%E5%BA%8F%E5%82%A8%E5%AD%98%E5%88%B0%E5%90%8E%E5%8F%B0/"/>
    <id>https://zhangangs.github.io/2018/05/05/ng-table数据排序储存到后台/</id>
    <published>2018-05-05T11:27:00.000Z</published>
    <updated>2018-12-01T08:31:57.596Z</updated>
    
    <content type="html"><![CDATA[<p>工作中遇到一个小问题，使用ng-table插件做的前台动态数据排序，页面刷新后数据排序就会失效。但是客户要数据排序后保存到后台，翻页或者重新加载页面还是按照保存的排序来展示数据。</p><p>那没办法，只能看看ng-table API文档了，看有没有相应的接口，最后找到一个对应的方法<code>onAfterDataSorted</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//请求数据，初始化排序</span></span><br><span class="line">$scope.filters = &#123;</span><br><span class="line">  age: <span class="string">"desc"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.tableParams = <span class="keyword">new</span> NgTableParams(&#123;</span><br><span class="line">  sorting: $scope.filters,</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  dataset: simpleList,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//数据重新排序触发</span></span><br><span class="line">ngTableEventsChannel.onAfterDataSorted(<span class="function"><span class="keyword">function</span>(<span class="params">tableParams, name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(tableParams.sorting() != $scope.filters)&#123;</span><br><span class="line">    <span class="comment">//发送ajax请求,储存数据</span></span><br><span class="line">    <span class="built_in">console</span>.log(tableParams.sorting());</span><br><span class="line">    <span class="comment">//重置排序</span></span><br><span class="line">    $scope.filters = tableParams.sorting();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,$scope, <span class="keyword">this</span>.tableParams)</span><br></pre></td></tr></table></figure><p>由于我看文档不够仔细，花了很长的时间在这里，做一个简单的记录，希望以后能仔细耐心点。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;工作中遇到一个小问题，使用ng-table插件做的前台动态数据排序，页面刷新后数据排序就会失效。但是客户要数据排序后保存到后台，翻页或者重新加载页面还是按照保存的排序来展示数据。&lt;/p&gt;
&lt;p&gt;那没办法，只能看看ng-table API文档了，看有没有相应的接口，最后找到一
      
    
    </summary>
    
    
      <category term="angularjs, ng-table" scheme="https://zhangangs.github.io/tags/angularjs-ng-table/"/>
    
  </entry>
  
  <entry>
    <title>gulp给文件添加自定义版本号，解决浏览器缓存</title>
    <link href="https://zhangangs.github.io/2018/04/12/gulp%E7%BB%99%E6%96%87%E4%BB%B6%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%89%88%E6%9C%AC%E5%8F%B7/"/>
    <id>https://zhangangs.github.io/2018/04/12/gulp给文件添加自定义版本号/</id>
    <published>2018-04-11T16:00:00.000Z</published>
    <updated>2018-12-01T08:31:57.595Z</updated>
    
    <content type="html"><![CDATA[<p>在工作中遇到这个问题，每次发布后，都要清理浏览器缓存才能查看最新的信息，这样非常的不方便。</p><p>同事在构建文件的时候添加了hash值，解决了这个问题(<code>gulp-rev</code>插件)。</p><p>但是我觉得不够直观，虽然解决了文件的缓存，但是不能直观的看到发布的版本号（每次发布都有一个版本号）。</p><p>所以，我做了一些改进，解决这个问题。</p><p><strong> 首先，是提取发布版本号 </strong></p><p>我写了个gulp的任务,基本思路是用nodejs读取文件，再匹配需要的字段，储存到version中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取到jenkins版本号</span></span><br><span class="line"><span class="keyword">var</span> version = <span class="string">''</span>;</span><br><span class="line"><span class="comment">// 提取jenkinsfile中提交的版本号，构建到index.html中(效果： vendor-v1.3.2.js, v1.3.2为jenkins构建版本号)</span></span><br><span class="line">gulp.task(<span class="string">'version'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    fs.readFile(path.join(__dirname, <span class="string">'Jenkinsfile'</span>), &#123;</span><br><span class="line">        encoding: <span class="string">'utf8'</span>,</span><br><span class="line">        flag: <span class="string">'r'</span></span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            log(<span class="string">"jenkinsfile文件读取失败"</span>);</span><br><span class="line">            version = <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//使用g选项，全局匹配</span></span><br><span class="line">            <span class="keyword">var</span> res = data.match(<span class="regexp">/gateway-web:.*\"/g</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> res) &#123;</span><br><span class="line">                <span class="keyword">if</span> (res[i].slice(<span class="number">12</span>).indexOf(<span class="string">" "</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">                    <span class="comment">//去除最后一个字符</span></span><br><span class="line">                    res[i] = res[i].substr(<span class="number">0</span>, res[i].length - <span class="number">1</span>);</span><br><span class="line">                    <span class="comment">//没有检测到空格，储存版本号</span></span><br><span class="line">                    version = res[i].slice(<span class="number">12</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            log(<span class="string">'发布版本号为:'</span> + version);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong> 第二步：构建的时候把版本号添加到文件中 </strong></p><p>需要安装插件 <code>gulp-custom-rev</code>,  npm安装 <code>$ npm install --save-dev gulp-custom-rev</code>，<a href="https://www.npmjs.com/package/gulp-custom-rev" target="_blank" rel="noopener">gulp-custom-rev主页</a></p><p>使用方法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rev = <span class="built_in">require</span>(<span class="string">'gulp-custom-rev'</span>);</span><br><span class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'src/*.css'</span>)</span><br><span class="line">        <span class="comment">//添加版本号</span></span><br><span class="line">        .pipe(rev(version))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'dist'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>完成。</p><p><strong> 2018年7月15日 更新 </strong></p><p>最近这段时间，看到百度大牛写的《关于大公司是怎么打包发布》这篇文章。<br>觉得给资源添加统一的版本号，似乎有点不好，因为有些资源没有改变，现在的做法也添加了统一的版本号，（其实不用更改），感觉不是很优雅，有时间改回原来的hash方式。</p><p>但是，我们现在的做法是js和css全都合并成一个文件，这就很尴尬，资源按需加载势在必行啊。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在工作中遇到这个问题，每次发布后，都要清理浏览器缓存才能查看最新的信息，这样非常的不方便。&lt;/p&gt;
&lt;p&gt;同事在构建文件的时候添加了hash值，解决了这个问题(&lt;code&gt;gulp-rev&lt;/code&gt;插件)。&lt;/p&gt;
&lt;p&gt;但是我觉得不够直观，虽然解决了文件的缓存，但是不
      
    
    </summary>
    
    
      <category term="git" scheme="https://zhangangs.github.io/tags/git/"/>
    
  </entry>
  
</feed>
